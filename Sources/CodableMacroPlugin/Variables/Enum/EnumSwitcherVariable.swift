@_implementationOnly import SwiftSyntax
@_implementationOnly import SwiftSyntaxMacros

/// A type representing data associated with an enum variable switch case.
///
/// This type informs how this variable needs to be initialized,
/// decoded/encoded in the macro expansion phase.
protocol EnumSwitcherVariable: Variable
where CodingLocation == EnumSwitcherLocation, Generated == EnumSwitcherGenerated
{
    /// Creates value expressions for provided enum-case variable.
    ///
    /// Determines the value of enum-case variable to have `CodingKey`
    /// based values or any raw values.
    ///
    /// - Parameters:
    ///   - variable: The variable for which generated.
    ///   - values: The values present in syntax.
    ///   - codingKeys: The map where `CodingKeys` maintained.
    ///   - context: The context in which to perform the macro expansion.
    ///
    /// - Returns: The generated value.
    func keyExpression<Var: EnumCaseVariable>(
        for variable: Var, values: [ExprSyntax],
        codingKeys: CodingKeysMap, context: some MacroExpansionContext
    ) -> EnumVariable.CaseValue

    /// Creates additional enum declarations for enum variable.
    ///
    /// The generated enum is a raw enum of `String` type
    /// and confirms to `CodingKey`.
    ///
    /// - Parameter context: The macro expansion context.
    /// - Returns: The generated enum declaration syntax.
    func codingKeys(
        in context: some MacroExpansionContext
    ) -> MemberBlockItemListSyntax
}

/// Represents the location for decoding/encoding for `EnumSwitcherVariable`.
///
/// These data will be used to generated switch expression syntax and
/// additional code.
struct EnumSwitcherLocation {
    ///The decoder/encoder syntax to use.
    ///
    /// Represents the decoder/encoder argument syntax for
    /// the `Codable` conformance implementation methods.
    let coder: TokenSyntax
    ///The decoding/encoding container syntax to use.
    ///
    /// Represents the primary container created from decoder/encoder.
    let container: TokenSyntax
    /// The `CodingKey` type.
    ///
    /// Represents the `CodingKeys` type
    /// expression containing all keys.
    let keyType: ExprSyntax
    /// The current enum type.
    ///
    /// Represents the type expression of enum
    /// for which declaration being generated.
    let selfType: ExprSyntax
}

/// Represents the syntax generated by `EnumSwitcherVariable`.
///
/// Represents the switch expression with additional prefix code generated.
struct EnumSwitcherGenerated {
    /// A type representing enum-case specific data.
    ///
    /// This data will be related to switch statement generated
    /// and passed to each case.
    enum CaseData {
        /// Case specific callback for decoding/encoding case variation.
        ///
        /// The passed token is used by switcher to decode/encode case
        /// variation.
        typealias CoderCallback = (TokenSyntax) -> CodeBlockItemListSyntax
        /// Represents case is decoded/encoded in the provided container
        /// keyed by variation value.
        ///
        /// The associated properties of case are decoded/encoded keyed
        /// by enum-case variation data.
        ///
        /// - Parameter container: The decoding/encoding container
        ///   for enum-case.
        case container(_ container: TokenSyntax)
        /// Represents case is decoded/encoded using provided data.
        ///
        /// The associated properties of case are decoded/encoded from/to
        /// the provided decoder/encoder, while enum-case variation data
        /// by passing the value in the provided callback .
        ///
        /// - Parameters:
        ///   - coder: The decoder/encoder for decoding/encoding enum-case
        ///     associated variables.
        ///   - postfix: The callback to generate case variation data.
        case coder(_ coder: TokenSyntax, _ postfix: CoderCallback)
    }

    /// The switch statement data for enum-case.
    ///
    /// Represents the data that will be passed to individual
    /// enum-case variables.
    let data: CaseData
    /// The switch header expression.
    ///
    /// This expression will be used to switch on
    /// by all the enum-case variables.
    let expr: ExprSyntax
    /// The additional code.
    ///
    /// This code will prepend the switch expression generated.
    let code: CodeBlockItemListSyntax
    /// Whether to add default case for switch statement.
    ///
    /// Only set to true if default case is required for switch.
    /// Depending on this value and if any case is ignored
    /// default case is added.
    let defaultCase: Bool
}
