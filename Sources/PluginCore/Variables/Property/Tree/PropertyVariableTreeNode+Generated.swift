import SwiftSyntax

extension PropertyVariableTreeNode {
    /// Represents the syntax generated by `PropertyVariableTreeNode`.
    ///
    /// Represents the container retrieval syntax and conditional
    /// decoding/encoding code syntax generated.
    struct Generated {
        /// The container retrieval syntax.
        ///
        /// Represents container retrieval syntax that can be shared.
        let containerSyntax: CodeBlockItemListSyntax
        /// The decoding/encoding syntax for variables.
        ///
        /// Represents variable decoding/encoding syntax.
        let codingSyntax: CodeBlockItemListSyntax
        /// The conditional syntax.
        ///
        /// Represents actual decoding/encoding syntax.
        let conditionalSyntax: CodeBlockItemListSyntax

        /// Combines both syntaxes into a single syntax.
        ///
        /// Combines container retrieval syntax and conditional syntax
        /// into single code syntax.
        ///
        /// - Returns: The combined code syntax.
        func combined() -> CodeBlockItemListSyntax {
            return CodeBlockItemListSyntax {
                containerSyntax
                codingSyntax
                conditionalSyntax
            }
        }
    }
}

extension PropertyVariableTreeNode.Generated {
    /// Adds two generated syntaxes into a single generation.
    ///
    /// The generated single syntax represents both the
    /// generated syntaxes added.
    ///
    /// - Parameters:
    ///   - lhs: The first value to add.
    ///   - rhs: The second value to add.
    ///
    /// - Returns: The final generated syntax.
    static func + (lhs: Self, rhs: Self) -> Self {
        return .init(
            containerSyntax: CodeBlockItemListSyntax {
                lhs.containerSyntax
                rhs.containerSyntax
            },
            codingSyntax: CodeBlockItemListSyntax {
                lhs.codingSyntax
                rhs.codingSyntax
            },
            conditionalSyntax: CodeBlockItemListSyntax {
                lhs.conditionalSyntax
                rhs.conditionalSyntax
            }
        )
    }
}
