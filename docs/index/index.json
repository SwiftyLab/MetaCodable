{"includedArchiveIdentifiers":["MetaCodable"],"interfaceLanguages":{"swift":[{"children":[{"title":"Essentials","type":"groupMarker"},{"children":[{"title":"MetaCodable essentials","type":"groupMarker"},{"path":"\/tutorials\/metacodable\/essential","title":"Use with general-purpose Swift types","type":"project"},{"path":"\/tutorials\/metacodable\/commonstrategies","title":"Using Common Strategies","type":"project"},{"path":"\/tutorials\/metacodable\/enum","title":"Represent variations in data","type":"project"},{"title":"Advanced MetaCodable","type":"groupMarker"},{"path":"\/tutorials\/metacodable\/helper","title":"Add common decoding\/encoding customizations","type":"project"},{"path":"\/tutorials\/metacodable\/dynamic","title":"Represent dynamic data variations with protocol","type":"project"}],"path":"\/tutorials\/usage","title":"Discover MetaCodable","type":"overview"},{"path":"\/documentation\/metacodable\/limitations","title":"Limitations","type":"article"},{"title":"Macros","type":"groupMarker"},{"path":"\/documentation\/metacodable\/codable(commonstrategies:)","title":"macro Codable(commonStrategies: [CodableCommonStrategy])","type":"macro"},{"path":"\/documentation\/metacodable\/conformdecodable(commonstrategies:)","title":"macro ConformDecodable(commonStrategies: [CodableCommonStrategy])","type":"macro"},{"path":"\/documentation\/metacodable\/conformencodable(commonstrategies:)","title":"macro ConformEncodable(commonStrategies: [CodableCommonStrategy])","type":"macro"},{"path":"\/documentation\/metacodable\/memberinit()","title":"macro MemberInit()","type":"macro"},{"title":"Strategies","type":"groupMarker"},{"path":"\/documentation\/metacodable\/codedat(_:)","title":"macro CodedAt(StaticString...)","type":"macro"},{"path":"\/documentation\/metacodable\/decodedat(_:)","title":"macro DecodedAt(StaticString...)","type":"macro"},{"path":"\/documentation\/metacodable\/encodedat(_:)","title":"macro EncodedAt(StaticString...)","type":"macro"},{"path":"\/documentation\/metacodable\/codedin(_:)","title":"macro CodedIn(StaticString...)","type":"macro"},{"path":"\/documentation\/metacodable\/codedas()","title":"macro CodedAs<T>()","type":"macro"},{"path":"\/documentation\/metacodable\/codedas(_:_:)","title":"macro CodedAs<T>(T, T...)","type":"macro"},{"path":"\/documentation\/metacodable\/contentat(_:_:)","title":"macro ContentAt(StaticString, StaticString...)","type":"macro"},{"path":"\/documentation\/metacodable\/untagged()","title":"macro UnTagged()","type":"macro"},{"path":"\/documentation\/metacodable\/codingkeys(_:)","title":"macro CodingKeys(CodingKeyNameStrategy)","type":"macro"},{"path":"\/documentation\/metacodable\/inherits(decodable:encodable:)","title":"macro Inherits(decodable: Bool, encodable: Bool)","type":"macro"},{"path":"\/documentation\/metacodable\/codablecommonstrategy","title":"CodableCommonStrategy","type":"struct"},{"title":"Helpers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/codedby(_:)","title":"macro CodedBy<T>(T)","type":"macro"},{"path":"\/documentation\/metacodable\/codedby(_:properties:)","title":"macro CodedBy<Parent, Helper, each Property>((repeat each Property) -> Helper, properties: repeat KeyPath<Parent, each Property>)","type":"macro"},{"path":"\/documentation\/metacodable\/codedby(_:arguments:properties:)-7j53l","title":"macro CodedBy<Parent, Helper, each Argument, each Property>((repeat each Argument, repeat each Property) -> Helper, arguments: repeat each Argument, properties: repeat KeyPath<Parent, each Property>)","type":"macro"},{"path":"\/documentation\/metacodable\/codedby(_:arguments:properties:)-47t86","title":"macro CodedBy<Parent, Helper, Argument1, each Property>((Argument1, repeat each Property) -> Helper, arguments: Argument1, properties: repeat KeyPath<Parent, each Property>)","type":"macro"},{"path":"\/documentation\/metacodable\/codedby(_:arguments:_:properties:)","title":"macro CodedBy<Parent, Helper, Argument1, Argument2, each Property>((Argument1, Argument2, repeat each Property) -> Helper, arguments: Argument1, Argument2, properties: repeat KeyPath<Parent, each Property>)","type":"macro"},{"path":"\/documentation\/metacodable\/codedby(_:arguments:_:_:properties:)","title":"macro CodedBy<Parent, Helper, Argument1, Argument2, Argument3, each Property>((Argument1, Argument2, Argument3, repeat each Property) -> Helper, arguments: Argument1, Argument2, Argument3, properties: repeat KeyPath<Parent, each Property>)","type":"macro"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/metacodable\/helpercoder\/coded","title":"Coded","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/metacodable\/helpercoder\/decode(from:)","title":"func decode(from: any Decoder) throws -> Self.Coded","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/decode(from:forkey:)-5o9sv","title":"func decode<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/decode(from:forkey:)","title":"func decode<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/decodeifpresent(from:)-6b3ri","title":"func decodeIfPresent(from: any Decoder) throws -> Self.Coded?","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/decodeifpresent(from:)","title":"func decodeIfPresent(from: any Decoder) throws -> Self.Coded?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/decodeifpresent(from:forkey:)-52cqt","title":"func decodeIfPresent<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded?","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/decodeifpresent(from:forkey:)","title":"func decodeIfPresent<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded?","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-25yjk","title":"func encode(Self.Coded, to: any Encoder) throws","type":"method"},{"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)-ag7u","title":"func encode(Self.Coded, to: any Encoder) throws","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)","title":"func encode(Self.Coded, to: any Encoder) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:atkey:)-70vkr","title":"func encode<EncodingContainer>(Self.Coded, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/encode(_:to:atkey:)","title":"func encode<EncodingContainer>(Self.Coded, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/encodeifpresent(_:to:)-85bec","title":"func encodeIfPresent(Self.Coded?, to: any Encoder) throws","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/encodeifpresent(_:to:)","title":"func encodeIfPresent(Self.Coded?, to: any Encoder) throws","type":"method"},{"children":[{"children":[{"path":"\/documentation\/metacodable\/helpercoder\/encodeifpresent(_:to:atkey:)-91902","title":"func encodeIfPresent<EncodingContainer>(Self.Coded?, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"}],"title":"HelperCoder Implementations","type":"groupMarker"}],"path":"\/documentation\/metacodable\/helpercoder\/encodeifpresent(_:to:atkey:)","title":"func encodeIfPresent<EncodingContainer>(Self.Coded?, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"}],"path":"\/documentation\/metacodable\/helpercoder","title":"HelperCoder","type":"protocol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/init(default:)","title":"init(default: S)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/decode(from:)","title":"func decode(from: any Decoder) throws -> S","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/decode(from:forkey:)","title":"func decode<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/decodeifpresent(from:)","title":"func decodeIfPresent(from: any Decoder) throws -> Self.Coded?","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/decodeifpresent(from:forkey:)","title":"func decodeIfPresent<DecodingContainer>(from: DecodingContainer, forKey: DecodingContainer.Key) throws -> Self.Coded?","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/encode(_:to:)","title":"func encode(Self.Coded, to: any Encoder) throws","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/encode(_:to:atkey:)","title":"func encode<EncodingContainer>(Self.Coded, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/encodeifpresent(_:to:)","title":"func encodeIfPresent(Self.Coded?, to: any Encoder) throws","type":"method"},{"path":"\/documentation\/metacodable\/lossysequencecoder\/encodeifpresent(_:to:atkey:)","title":"func encodeIfPresent<EncodingContainer>(Self.Coded?, to: inout EncodingContainer, atKey: EncodingContainer.Key) throws","type":"method"}],"path":"\/documentation\/metacodable\/lossysequencecoder\/helpercoder-implementations","title":"HelperCoder Implementations","type":"symbol"}],"path":"\/documentation\/metacodable\/lossysequencecoder","title":"LossySequenceCoder","type":"struct"},{"title":"Fallback value","type":"groupMarker"},{"path":"\/documentation\/metacodable\/default(_:)","title":"macro Default<T>(T)","type":"macro"},{"path":"\/documentation\/metacodable\/default(ifmissing:)","title":"macro Default<T>(ifMissing: T)","type":"macro"},{"path":"\/documentation\/metacodable\/default(ifmissing:forerrors:)","title":"macro Default<T>(ifMissing: T, forErrors: T)","type":"macro"},{"title":"Ignoring","type":"groupMarker"},{"path":"\/documentation\/metacodable\/ignorecoding()","title":"macro IgnoreCoding()","type":"macro"},{"path":"\/documentation\/metacodable\/ignoredecoding()","title":"macro IgnoreDecoding()","type":"macro"},{"path":"\/documentation\/metacodable\/ignoreencoding()","title":"macro IgnoreEncoding()","type":"macro"},{"path":"\/documentation\/metacodable\/ignoreencoding(if:)-1iuvv","title":"macro IgnoreEncoding<each T>(if: (repeat each T) -> Bool)","type":"macro"},{"path":"\/documentation\/metacodable\/ignoreencoding(if:)-7toka","title":"macro IgnoreEncoding<T>(if: (T) -> Bool)","type":"macro"},{"path":"\/documentation\/metacodable\/ignoreencoding(basedon:)","title":"macro IgnoreEncoding<T>(basedOn: (T) -> Bool)","type":"macro"},{"path":"\/documentation\/metacodable\/ignorecodinginitialized()","title":"macro IgnoreCodingInitialized()","type":"macro"},{"title":"Dynamic Coding","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodable\/identifiervalue","title":"IdentifierValue","type":"associatedtype"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodable\/identifier","title":"static var identifier: DynamicCodableIdentifier<Self.IdentifierValue>","type":"property"}],"path":"\/documentation\/metacodable\/dynamiccodable","title":"DynamicCodable","type":"protocol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/~=(_:_:)-3ytwt","title":"static func ~= <Key>(DynamicCodableIdentifier<Value>, Key) -> Bool","type":"op"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/~=(_:_:)-41i8r","title":"static func ~= (DynamicCodableIdentifier<Value>, DynamicCodableIdentifier<Value>) -> Bool","type":"op"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/~=(_:_:)-6qgl6","title":"static func ~= (DynamicCodableIdentifier<Value>, Value) -> Bool","type":"op"},{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/many(_:)","title":"case many([Value])","type":"case"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/one(_:)","title":"case one(Value)","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/init(intvalue:)","title":"init?(intValue: Int)","type":"init"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/init(stringvalue:)","title":"init?(stringValue: String)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/debugdescription-57cnm","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/description-485fe","title":"var description: String","type":"property"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/intvalue","title":"var intValue: Int?","type":"property"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/stringvalue","title":"var stringValue: String","type":"property"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/debugdescription","title":"var debugDescription: String","type":"property"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/encode(to:)","title":"func encode(to: any Encoder) throws","type":"method"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/init(arrayliteral:)","title":"init(arrayLiteral: Value...)","type":"init"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/expressiblebyarrayliteral-implementations","title":"ExpressibleByArrayLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/init(extendedgraphemeclusterliteral:)","title":"init(extendedGraphemeClusterLiteral: Value.ExtendedGraphemeClusterLiteralType)","type":"init"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/expressiblebyextendedgraphemeclusterliteral-implementations","title":"ExpressibleByExtendedGraphemeClusterLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/init(floatliteral:)","title":"init(floatLiteral: Value.FloatLiteralType)","type":"init"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/expressiblebyfloatliteral-implementations","title":"ExpressibleByFloatLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/init(integerliteral:)","title":"init(integerLiteral: Value.IntegerLiteralType)","type":"init"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/expressiblebyintegerliteral-implementations","title":"ExpressibleByIntegerLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/init(nilliteral:)","title":"init(nilLiteral: ())","type":"init"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/expressiblebynilliteral-implementations","title":"ExpressibleByNilLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/init(stringliteral:)","title":"init(stringLiteral: Value.StringLiteralType)","type":"init"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/expressiblebystringliteral-implementations","title":"ExpressibleByStringLiteral Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/init(unicodescalarliteral:)","title":"init(unicodeScalarLiteral: Value.UnicodeScalarLiteralType)","type":"init"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier\/expressiblebyunicodescalarliteral-implementations","title":"ExpressibleByUnicodeScalarLiteral Implementations","type":"symbol"}],"path":"\/documentation\/metacodable\/dynamiccodableidentifier","title":"DynamicCodableIdentifier","type":"enum"},{"children":[{"title":"Options","type":"groupMarker"},{"path":"\/documentation\/metacodable\/metacodableconfig\/scan","title":"configuration option Scan","type":"property"}],"path":"\/documentation\/metacodable\/metacodableconfig","title":"MetaCodableConfig","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/pascalcase","title":"case PascalCase","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/screaming_kebab_case","title":"case SCREAMING－KEBAB－CASE","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/screaming_snake_case","title":"case SCREAMING_SNAKE_CASE","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/train_case","title":"case Train－Case","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/camelcase","title":"case camelCase","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/camel_snake_case","title":"case camel_Snake_Case","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/kebab_case","title":"case kebab－case","type":"case"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/snake_case","title":"case snake_case","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/metacodable\/codingkeynamestrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/metacodable\/codingkeynamestrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/metacodable\/codingkeynamestrategy","title":"CodingKeyNameStrategy","type":"enum"}],"path":"\/documentation\/metacodable","title":"MetaCodable","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}