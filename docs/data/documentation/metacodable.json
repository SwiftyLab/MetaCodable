{"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"text":"Supercharge ","type":"text"},{"code":"Swift","type":"codeVoice"},{"text":"â€™s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations with macros.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable"},"hierarchy":{"paths":[[]]},"topicSections":[{"anchor":"Essentials","title":"Essentials","identifiers":["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations"]},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ConformDecodable(commonStrategies:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ConformEncodable(commonStrategies:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()"],"title":"Macros","anchor":"Macros"},{"anchor":"Strategies","title":"Strategies","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/DecodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/EncodedAt(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/UnTagged()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Inherits(decodable:encodable:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodableCommonStrategy"]},{"title":"Helpers","identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:properties:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:arguments:properties:)-7j53l","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:arguments:properties:)-47t86","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:arguments:_:properties:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:arguments:_:_:properties:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"],"anchor":"Helpers"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:forErrors:)"],"anchor":"Fallback-value","title":"Fallback value"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(basedOn:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"anchor":"Ignoring","title":"Ignoring"},{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig"],"anchor":"Dynamic-Coding","title":"Dynamic Coding"},{"anchor":"Enumerations","title":"Enumerations","generated":true,"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy"]}],"kind":"symbol","primaryContentSections":[{"content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" framework exposes custom macros which can be used to generate dynamic "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations. The core of the framework is "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)"},{"type":"text","text":" macro which generates the implementation aided by data provided with using other macros."}]},{"type":"paragraph","inlineContent":[{"code":"MetaCodable","type":"codeVoice"},{"text":" aims to supercharge your ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementations by providing these inbox features:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" value declaration per variable with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":" passing single argument, instead of requiring you to write all the ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to create flattened model for nested "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" values with "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Allows to create composition of multiple "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":" passing no arguments.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to read data from additional fallback "},{"type":"codeVoice","code":"CodingKey"},{"text":"s provided with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to provide default value in case of decoding failures with ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true},{"text":", or only in case of failures when missing value with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:)"},{"type":"text","text":". Different default values can also be used for value missing and other errors respectively with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:forErrors:)","isActive":true,"type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to create custom decoding\/encoding strategies with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":" and using them with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true,"type":"reference"},{"type":"text","text":", "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:properties:)","isActive":true},{"type":"text","text":" or others. i.e. "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"},{"type":"text","text":" etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows applying common strategies like ","type":"text"},{"code":"ValueCoder","type":"codeVoice"},{"type":"text","text":" to all properties of a type through the "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","isActive":true},{"type":"text","text":" parameter, reducing the need for repetitive property annotations."}]}]},{"content":[{"inlineContent":[{"text":"Allows specifying different case values with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"type":"text","text":" and case value\/protocol type identifier type different from "},{"type":"codeVoice","code":"String"},{"text":" with ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows specifying enum-case\/protocol type identifier path with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"text":" and case content path with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Allows decoding\/encoding enums that lack distinct identifiers for each case data with ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/UnTagged()","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to ignore specific properties\/cases from decoding\/encoding with ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":", "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","type":"reference","isActive":true},{"type":"text","text":". Allows to ignore encoding based on custom conditions with "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv","type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allows to use camel-case names for variables according to "},{"type":"reference","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","isActive":true},{"type":"text","text":", while enabling a type\/case to work with different case style keys with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to ignore all initialized properties of a type\/case from decoding\/encoding with ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true},{"text":" unless explicitly asked to decode\/encode by attaching any coding attributes, i.e. ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"reference","isActive":true},{"type":"text","text":", "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"text":", ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" etc."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Allows to generate protocol decoding\/encoding ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"type":"text","text":"s with "},{"code":"MetaProtocolCodable","type":"codeVoice"},{"text":" build tool plugin from ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","isActive":true,"type":"reference"},{"type":"text","text":" types."}]}]}],"type":"unorderedList"},{"inlineContent":[{"isActive":true,"overridingTitle":"See the limitations for this macro","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","type":"reference","overridingTitleInlineContent":[{"type":"strong","inlineContent":[{"text":"See the limitations for this macro","type":"text"}]}]},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","text":"Installation","level":2,"anchor":"Installation"},{"type":"tabNavigator","tabs":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"reference","identifier":"https:\/\/swift.org\/package-manager\/","isActive":true},{"text":" is a tool for automating the distribution of Swift code and is integrated into the ","type":"text"},{"type":"codeVoice","code":"swift"},{"text":" compiler.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once you have your Swift package set up, adding "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" as a dependency is as easy as adding it to the "},{"code":"dependencies","type":"codeVoice"},{"type":"text","text":" value of your "},{"type":"codeVoice","code":"Package.swift"},{"text":".","type":"text"}]},{"syntax":"swift","code":[".package(url: \"https:\/\/github.com\/SwiftyLab\/MetaCodable.git\", from: \"1.0.0\"),"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Then you can add the ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"text":" module product as dependency to the ","type":"text"},{"code":"target","type":"codeVoice"},{"type":"text","text":"s of your choosing, by adding it to the "},{"type":"codeVoice","code":"dependencies"},{"type":"text","text":" value of your "},{"code":"target","type":"codeVoice"},{"type":"text","text":"s."}]},{"code":[".product(name: \"MetaCodable\", package: \"MetaCodable\"),"],"type":"codeListing","syntax":"swift"}],"title":"Swift Package Manager"},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/cocoapods.org","type":"reference","isActive":true},{"text":" is a dependency manager for Cocoa projects. For usage and installation instructions, visit their website. To integrate ","type":"text"},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" into your Xcode project using CocoaPods, specify it in your "},{"code":"Podfile","type":"codeVoice"},{"text":":","type":"text"}]},{"syntax":"ruby","code":["pod 'MetaCodable'"],"type":"codeListing"}],"title":"CocoaPods"}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/metacodable"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"metadata":{"symbolKind":"module","modules":[{"name":"MetaCodable"}],"title":"MetaCodable","role":"collection","externalID":"MetaCodable","platforms":[{"beta":false,"name":"Swift","introducedAt":"5.9"}],"roleHeading":"Framework"},"references":{"doc://MetaCodable/documentation/MetaCodable/MetaCodableConfig":{"kind":"symbol","abstract":[{"type":"text","text":"The configuration file providing additional customization options for "},{"type":"codeVoice","code":"MetaProtocolCodable"},{"text":" build tool plugin.","type":"text"}],"role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"configuration"},{"kind":"text","text":" "},{"text":"file","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MetaCodableConfig","kind":"identifier"}],"title":"MetaCodableConfig","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MetaCodableConfig","url":"\/documentation\/metacodable\/metacodableconfig"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the attached type\/enum-case will be ignored for decoding\/encoding."}],"url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"kind":"text","text":"()"}],"role":"symbol","kind":"symbol","title":"IgnoreCodingInitialized()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"topic","url":"\/documentation\/metacodable\/ignorecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"role":"symbol","title":"IgnoreCoding()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreDecoding"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","title":"IgnoreDecoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codedby(_:)","type":"topic","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"title":"CodedBy(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},"doc://MetaCodable/documentation/MetaCodable/Default(ifMissing:forErrors:)":{"url":"\/documentation\/metacodable\/default(ifmissing:forerrors:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Provides different "},{"code":"default","type":"codeVoice"},{"text":" values to be used for missing value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and decoding errors."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:forErrors:)","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Default"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"ifMissing","kind":"externalParam"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"forErrors"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"Default(ifMissing:forErrors:)","role":"symbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"type":"topic","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"url":"\/documentation\/metacodable\/helpercoder","abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" respectively."}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-7toka":{"abstract":[{"type":"text","text":"Indicates the field needs to be encoded only if provided condition"},{"type":"text","text":" "},{"type":"text","text":"is not satisfied."}],"url":"\/documentation\/metacodable\/ignoreencoding(if:)-7toka","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"if","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"role":"symbol","kind":"symbol","title":"IgnoreEncoding(if:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka"},"doc://MetaCodable/documentation/MetaCodable/CodableCommonStrategy":{"type":"topic","navigatorTitle":[{"kind":"identifier","text":"CodableCommonStrategy"}],"url":"\/documentation\/metacodable\/codablecommonstrategy","kind":"symbol","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodableCommonStrategy","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodableCommonStrategy"}],"title":"CodableCommonStrategy","abstract":[{"type":"text","text":"A marker type used to represent a common type conversion strategy for the "},{"type":"codeVoice","code":"@Codable"},{"text":" macro.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/EncodedAt(_:)":{"type":"topic","kind":"symbol","url":"\/documentation\/metacodable\/encodedat(_:)","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/EncodedAt(_:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"EncodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":"...)"}],"title":"EncodedAt(_:)","abstract":[{"text":"Indicates the field needs to be encoded to a specific","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided, different from the decoding path."}]},"https://cocoapods.org":{"type":"link","identifier":"https:\/\/cocoapods.org","title":"CocoaPods","url":"https:\/\/cocoapods.org","titleInlineContent":[{"text":"CocoaPods","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/DecodedAt(_:)":{"type":"topic","url":"\/documentation\/metacodable\/decodedat(_:)","kind":"symbol","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DecodedAt(_:)","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DecodedAt"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":"...)","kind":"text"}],"title":"DecodedAt(_:)","abstract":[{"type":"text","text":"Indicates the field needs to be decoded to a specific"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided, different from the encoding path."}]},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","kind":"symbol","url":"\/documentation\/metacodable\/contentat(_:_:)","title":"ContentAt(_:_:)","type":"topic","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to be decoded\/encoded at the "},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":"...)"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedas(_:_:)","title":"CodedAs(_:_:)","type":"topic","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"text":" ","type":"text"},{"type":"text","text":"additional variable "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"...)","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/ConformEncodable(commonStrategies:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConformEncodable","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"commonStrategies"},{"text":": [","kind":"text"},{"preciseIdentifier":"s:11MetaCodable0B14CommonStrategyV","kind":"typeIdentifier","text":"CodableCommonStrategy"},{"kind":"text","text":"])"}],"url":"\/documentation\/metacodable\/conformencodable(commonstrategies:)","kind":"symbol","title":"ConformEncodable(commonStrategies:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ConformEncodable(commonStrategies:)","role":"symbol","abstract":[{"type":"text","text":"Generate "},{"code":"Encodable","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"type":"codeVoice","code":"class"},{"type":"text","text":", "},{"type":"codeVoice","code":"enum"},{"type":"text","text":", "},{"type":"codeVoice","code":"actor"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"protocol"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"declarations. This macro is named "},{"code":"ConformEncodable","type":"codeVoice"},{"text":" to avoid conflicts","type":"text"},{"type":"text","text":" "},{"text":"with the standard library ","type":"text"},{"code":"Encodable","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","kind":"symbol","url":"\/documentation\/metacodable\/codedas()","title":"CodedAs()","type":"topic","abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}],"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">()","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:arguments:properties:)-47t86":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Parent"},{"kind":"text","text":", "},{"text":"Helper","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Argument1","kind":"genericParameter"},{"text":", each ","kind":"text"},{"kind":"genericParameter","text":"Property"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Argument1"},{"kind":"text","text":", repeat each "},{"text":"Property","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Helper","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"arguments"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Argument1"},{"text":", ","kind":"text"},{"text":"properties","kind":"externalParam"},{"text":": repeat ","kind":"text"},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"Parent","kind":"typeIdentifier"},{"kind":"text","text":", each "},{"kind":"typeIdentifier","text":"Property"},{"kind":"text","text":">)"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:arguments:properties:)-47t86","title":"CodedBy(_:arguments:properties:)","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:arguments:properties:)-47t86","abstract":[{"text":"Indicates the field needs to be decoded and encoded by the created ","type":"text"},{"type":"codeVoice","code":"helper"},{"type":"text","text":" "},{"type":"text","text":"instance from provided arguments."}]},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","title":"CodedIn(_:)","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"text":" ","type":"text"},{"type":"text","text":"container "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided with field name as final"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedIn"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}]},"doc://MetaCodable/documentation/MetaCodable/MemberInit()":{"url":"\/documentation\/metacodable\/memberinit()","abstract":[{"type":"text","text":"Generate memberwise initializer(s) of "},{"code":"struct","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"actor"},{"text":" types","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by leveraging custom attributes provided on variable declarations."}],"role":"symbol","title":"MemberInit()","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/MemberInit()","type":"topic","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MemberInit","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Default","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/metacodable\/default(_:)","kind":"symbol","title":"Default(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","role":"symbol","abstract":[{"text":"Provides a ","type":"text"},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/LossySequenceCoder":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"LossySequenceCoder"}],"navigatorTitle":[{"text":"LossySequenceCoder","kind":"identifier"}],"url":"\/documentation\/metacodable\/lossysequencecoder","deprecated":true,"type":"topic","abstract":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":" that helps decoding\/encoding lossy sequence.","type":"text"}],"title":"LossySequenceCoder","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/LossySequenceCoder"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"role":"symbol","url":"\/documentation\/metacodable\/helpercoder\/coded","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"Coded","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","type":"topic","abstract":[{"text":"The actual type of value that is going to be decoded\/encoded.","type":"text"}],"title":"Coded","required":true},"doc://MetaCodable/documentation/MetaCodable/Limitations":{"url":"\/documentation\/metacodable\/limitations","abstract":[{"type":"text","text":"All the usage limitations for "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","isActive":true},{"text":".","type":"text"}],"role":"article","title":"Limitations","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Limitations","type":"topic","kind":"article"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodableIdentifier":{"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicCodableIdentifier"}],"title":"DynamicCodableIdentifier","url":"\/documentation\/metacodable\/dynamiccodableidentifier","abstract":[{"text":"The identifier option for ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","isActive":true,"type":"reference"},{"type":"text","text":" types."}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodableIdentifier","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DynamicCodableIdentifier"}],"type":"topic"},"https://www.swift.org/documentation/api-design-guidelines/#general-conventions":{"type":"link","identifier":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","title":"Swift API Design Guidelines","url":"https:\/\/www.swift.org\/documentation\/api-design-guidelines\/#general-conventions","titleInlineContent":[{"type":"text","text":"Swift API Design Guidelines"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-1iuvv":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv","type":"topic","url":"\/documentation\/metacodable\/ignoreencoding(if:)-1iuvv","abstract":[{"text":"Indicates the field\/case needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is not satisfied."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"<each "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"if","kind":"externalParam"},{"text":": (repeat each ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"role":"symbol","title":"IgnoreEncoding(if:)"},"doc://MetaCodable/tutorials/Usage":{"type":"topic","url":"\/tutorials\/usage","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"kind":"overview","title":"Discover MetaCodable","role":"overview"},"doc://MetaCodable/documentation/MetaCodable/CodingKeyNameStrategy":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeyNameStrategy","role":"symbol","type":"topic","title":"CodingKeyNameStrategy","abstract":[{"text":"The values that determine the equivalent","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" value for a property name."}],"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CodingKeyNameStrategy","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"CodingKeyNameStrategy"}],"url":"\/documentation\/metacodable\/codingkeynamestrategy"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"url":"\/documentation\/metacodable\/ignoreencoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","title":"IgnoreEncoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"doc://MetaCodable/documentation/MetaCodable/Default(ifMissing:)":{"title":"Default(ifMissing:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"ifMissing"},{"kind":"text","text":": "},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","abstract":[{"type":"text","text":"Provides a "},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when value is missing"},{"text":" ","type":"text"},{"type":"text","text":"and when not initialized explicitly in memberwise initializer(s)."}],"kind":"symbol","url":"\/documentation\/metacodable\/default(ifmissing:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(ifMissing:)"},"doc://MetaCodable/documentation/MetaCodable/ConformDecodable(commonStrategies:)":{"url":"\/documentation\/metacodable\/conformdecodable(commonstrategies:)","abstract":[{"text":"Generate ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"enum"},{"type":"text","text":", "},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"code":"protocol","type":"codeVoice"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations. This macro is named "},{"type":"codeVoice","code":"ConformDecodable"},{"type":"text","text":" to avoid conflicts"},{"text":" ","type":"text"},{"text":"with the standard library ","type":"text"},{"type":"codeVoice","code":"Decodable"},{"type":"text","text":" protocol."}],"role":"symbol","title":"ConformDecodable(commonStrategies:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ConformDecodable(commonStrategies:)","type":"topic","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ConformDecodable"},{"kind":"text","text":"("},{"text":"commonStrategies","kind":"externalParam"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","text":"CodableCommonStrategy","preciseIdentifier":"s:11MetaCodable0B14CommonStrategyV"},{"text":"])","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/UnTagged()":{"type":"topic","kind":"symbol","url":"\/documentation\/metacodable\/untagged()","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/UnTagged()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"UnTagged"},{"text":"()","kind":"text"}],"title":"UnTagged()","abstract":[{"text":"Indicates the cases of enum lack distinct identifier.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable":{"title":"MetaCodable","abstract":[{"text":"Supercharge ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"â€™s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations with macros.","type":"text"}],"url":"\/documentation\/metacodable","role":"collection","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","kind":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/Codable(commonStrategies:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"commonStrategies"},{"kind":"text","text":": ["},{"text":"CodableCommonStrategy","preciseIdentifier":"s:11MetaCodable0B14CommonStrategyV","kind":"typeIdentifier"},{"kind":"text","text":"])"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","title":"Codable(commonStrategies:)","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codable(commonstrategies:)","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"code":"class","type":"codeVoice"},{"type":"text","text":", "},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:arguments:properties:)-7j53l":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Parent"},{"kind":"text","text":", "},{"text":"Helper","kind":"genericParameter"},{"text":", each ","kind":"text"},{"text":"Argument","kind":"genericParameter"},{"kind":"text","text":", each "},{"kind":"genericParameter","text":"Property"},{"kind":"text","text":">((repeat each "},{"kind":"typeIdentifier","text":"Argument"},{"text":", repeat each ","kind":"text"},{"text":"Property","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Helper"},{"kind":"text","text":", "},{"kind":"externalParam","text":"arguments"},{"kind":"text","text":": repeat each "},{"text":"Argument","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"properties","kind":"externalParam"},{"text":": repeat ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"Parent","kind":"typeIdentifier"},{"kind":"text","text":", each "},{"kind":"typeIdentifier","text":"Property"},{"kind":"text","text":">)"}],"url":"\/documentation\/metacodable\/codedby(_:arguments:properties:)-7j53l","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded and encoded by the created "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" "},{"text":"instance from provided arguments.","type":"text"}],"title":"CodedBy(_:arguments:properties:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:arguments:properties:)-7j53l"},"https://swift.org/package-manager/":{"type":"link","identifier":"https:\/\/swift.org\/package-manager\/","title":"Swift Package Manager","url":"https:\/\/swift.org\/package-manager\/","titleInlineContent":[{"text":"Swift Package Manager","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:properties:)":{"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Parent"},{"kind":"text","text":", "},{"text":"Helper","kind":"genericParameter"},{"text":", each ","kind":"text"},{"text":"Property","kind":"genericParameter"},{"text":">((repeat each ","kind":"text"},{"kind":"typeIdentifier","text":"Property"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Helper"},{"kind":"text","text":", "},{"text":"properties","kind":"externalParam"},{"text":": repeat ","kind":"text"},{"text":"KeyPath","preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Parent"},{"kind":"text","text":", each "},{"kind":"typeIdentifier","text":"Property"},{"text":">)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:properties:)","title":"CodedBy(_:properties:)","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:properties:)","abstract":[{"text":"Indicates the field needs to be decoded and encoded by the created ","type":"text"},{"type":"codeVoice","code":"helper"},{"type":"text","text":" "},{"type":"text","text":"instance from provided arguments."}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:arguments:_:properties:)":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"text":"<","kind":"text"},{"text":"Parent","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Helper"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"Argument1"},{"kind":"text","text":", "},{"text":"Argument2","kind":"genericParameter"},{"text":", each ","kind":"text"},{"kind":"genericParameter","text":"Property"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Argument1"},{"kind":"text","text":", "},{"text":"Argument2","kind":"typeIdentifier"},{"text":", repeat each ","kind":"text"},{"text":"Property","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Helper"},{"kind":"text","text":", "},{"text":"arguments","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Argument1"},{"kind":"text","text":", "},{"text":"Argument2","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"properties"},{"kind":"text","text":": repeat "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"Parent","kind":"typeIdentifier"},{"text":", each ","kind":"text"},{"text":"Property","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"url":"\/documentation\/metacodable\/codedby(_:arguments:_:properties:)","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded and encoded by the created "},{"type":"codeVoice","code":"helper"},{"type":"text","text":" "},{"text":"instance from provided arguments.","type":"text"}],"title":"CodedBy(_:arguments:_:properties:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:arguments:_:properties:)"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:arguments:_:_:properties:)":{"title":"CodedBy(_:arguments:_:_:properties:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:arguments:_:_:properties:)","type":"topic","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:arguments:_:_:properties:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"text":"<","kind":"text"},{"text":"Parent","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Helper","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Argument1","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Argument2","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Argument3"},{"kind":"text","text":", each "},{"kind":"genericParameter","text":"Property"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Argument1"},{"kind":"text","text":", "},{"text":"Argument2","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Argument3","kind":"typeIdentifier"},{"kind":"text","text":", repeat each "},{"kind":"typeIdentifier","text":"Property"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Helper"},{"text":", ","kind":"text"},{"text":"arguments","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Argument1"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Argument2"},{"kind":"text","text":", "},{"text":"Argument3","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"properties","kind":"externalParam"},{"text":": repeat ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"text":"Parent","kind":"typeIdentifier"},{"text":", each ","kind":"text"},{"kind":"typeIdentifier","text":"Property"},{"kind":"text","text":">)"}],"abstract":[{"type":"text","text":"Indicates the field needs to be decoded and encoded by the created "},{"code":"helper","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"instance from provided arguments."}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the provided case format."}],"url":"\/documentation\/metacodable\/codingkeys(_:)","role":"symbol","title":"CodingKeys(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"text":"CodingKeyNameStrategy","kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"text":")","kind":"text"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/DynamicCodable":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DynamicCodable"}],"title":"DynamicCodable","url":"\/documentation\/metacodable\/dynamiccodable","abstract":[{"text":"A type that can be decoded\/encoded dynamically based on unique identifier.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/DynamicCodable","role":"symbol","navigatorTitle":[{"text":"DynamicCodable","kind":"identifier"}],"type":"topic"},"doc://MetaCodable/documentation/MetaCodable/Inherits(decodable:encodable:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Inherits(decodable:encodable:)","kind":"symbol","url":"\/documentation\/metacodable\/inherits(decodable:encodable:)","title":"Inherits(decodable:encodable:)","type":"topic","abstract":[{"text":"Indicates whether super class conforms to ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" or not."}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Inherits","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"decodable"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"encodable","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"type":"topic","kind":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":"...)"}],"title":"CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(basedOn:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(basedOn:)","type":"topic","url":"\/documentation\/metacodable\/ignoreencoding(basedon:)","abstract":[{"text":"Indicates the field needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is not satisfied, based on the containing object."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"basedOn","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"role":"symbol","title":"IgnoreEncoding(basedOn:)"}}}