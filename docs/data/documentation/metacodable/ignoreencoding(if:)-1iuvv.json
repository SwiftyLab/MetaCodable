{"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/metacodable\/ignoreencoding(if:)-1iuvv"]}],"abstract":[{"text":"Indicates the field\/case needs to be encoded only if provided condition","type":"text"},{"text":" ","type":"text"},{"text":"is not satisfied.","type":"text"}],"seeAlsoSections":[{"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(basedOn:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"anchor":"Ignoring","title":"Ignoring","generated":true}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"kind":"symbol","primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"attribute","text":"@attached"},{"text":"(peer) ","kind":"text"},{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"<each ","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"if"},{"kind":"text","text":" "},{"text":"condition","kind":"internalParam"},{"kind":"text","text":": (repeat each "},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"name":"condition","content":[{"type":"paragraph","inlineContent":[{"text":"The condition to be checked.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"inlineContent":[{"text":"This macro can be applied to variables to ignore them from encoding.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@IgnoreEncoding(if: \\String.isEmpty)","let field: String"],"type":"codeListing"},{"inlineContent":[{"text":"The decoding data needs to have applicable data in ","type":"text"},{"type":"codeVoice","code":"field"},{"type":"text","text":" key."},{"type":"text","text":" "},{"type":"text","text":"But the encoded data might not have any "},{"type":"codeVoice","code":"field"},{"type":"text","text":" key for specific values"},{"text":" ","type":"text"},{"type":"text","text":"if the condition for those values return "},{"type":"codeVoice","code":"true"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Similarly, for enums this macro can be applied to cases","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to ignore them from encoding."}]},{"code":["func fieldEncodable(_ str: String) {","    return !str.isEmpty","}","","@IgnoreEncoding(if: fieldEncodable)","case field(String)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"This case will never be encoded if associated "},{"type":"codeVoice","code":"String"},{"text":" data is empty.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"But "},{"code":"field","type":"codeVoice"},{"type":"text","text":" case will be decoded if case related data is present."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This macro on its own only validates if attached declaration"},{"text":" ","type":"text"},{"type":"text","text":"is a variable declaration. "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","type":"reference"},{"text":" macro uses this macro","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when generating final implementations."}]}],"style":"note","type":"aside","name":"Note"},{"style":"important","name":"Important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The condition argument types must confirm to "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" "},{"text":"and the single argument should match attached type when attached to field.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When attached to cases the arguments count, order and types should match"},{"text":" ","type":"text"},{"text":"attached enum-case associated variables.","type":"text"}]}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv"},"metadata":{"title":"IgnoreEncoding(if:)","externalID":"s:11MetaCodable14IgnoreEncoding2ifySbxxQpXE_tcRvzlufm","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreEncoding"},{"kind":"text","text":"<each "},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"if"},{"kind":"text","text":": (repeat each "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"role":"symbol","modules":[{"name":"MetaCodable"}],"symbolKind":"macro","platforms":[{"unavailable":false,"beta":false,"deprecated":false,"introducedAt":"5.9","name":"Swift"}],"roleHeading":"Macro"},"references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"url":"\/documentation\/metacodable\/ignoreencoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","title":"IgnoreEncoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(basedOn:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(basedOn:)","type":"topic","url":"\/documentation\/metacodable\/ignoreencoding(basedon:)","abstract":[{"text":"Indicates the field needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is not satisfied, based on the containing object."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"basedOn","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":")","kind":"text"}],"role":"symbol","title":"IgnoreEncoding(basedOn:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the attached type\/enum-case will be ignored for decoding\/encoding."}],"url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"kind":"text","text":"()"}],"role":"symbol","kind":"symbol","title":"IgnoreCodingInitialized()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-1iuvv":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv","type":"topic","url":"\/documentation\/metacodable\/ignoreencoding(if:)-1iuvv","abstract":[{"text":"Indicates the field\/case needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is not satisfied."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"<each "},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"if","kind":"externalParam"},{"text":": (repeat each ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"role":"symbol","title":"IgnoreEncoding(if:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-7toka":{"abstract":[{"type":"text","text":"Indicates the field needs to be encoded only if provided condition"},{"type":"text","text":" "},{"type":"text","text":"is not satisfied."}],"url":"\/documentation\/metacodable\/ignoreencoding(if:)-7toka","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"if","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}],"role":"symbol","kind":"symbol","title":"IgnoreEncoding(if:)","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka"},"doc://MetaCodable/documentation/MetaCodable":{"title":"MetaCodable","abstract":[{"text":"Supercharge ","type":"text"},{"type":"codeVoice","code":"Swift"},{"text":"â€™s ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" implementations with macros.","type":"text"}],"url":"\/documentation\/metacodable","role":"collection","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","kind":"symbol","type":"topic"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"topic","url":"\/documentation\/metacodable\/ignorecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"role":"symbol","title":"IgnoreCoding()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreDecoding"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","title":"IgnoreDecoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable/Codable(commonStrategies:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"commonStrategies"},{"kind":"text","text":": ["},{"text":"CodableCommonStrategy","preciseIdentifier":"s:11MetaCodable0B14CommonStrategyV","kind":"typeIdentifier"},{"kind":"text","text":"])"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","title":"Codable(commonStrategies:)","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codable(commonstrategies:)","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"code":"class","type":"codeVoice"},{"type":"text","text":", "},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}]}}}