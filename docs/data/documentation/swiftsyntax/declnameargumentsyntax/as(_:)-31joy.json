{"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DeclNameArgumentSyntax\/as(_:)-31joy"},"kind":"symbol","abstract":[{"type":"text","text":"Attempts to cast the current leaf syntax node to a different specified type."}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"This cast will always fail","type":"text"}]}],"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DeclNameArgumentSyntax"]]},"metadata":{"modules":[{"name":"SwiftSyntax"}],"extendedModule":"SwiftSyntax","roleHeading":"Instance Method","title":"as(_:)","platforms":[{"unavailable":false,"deprecated":true,"message":"This cast will always fail","beta":false}],"externalID":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2asyqd__Sgqd__mAA0bE0Rd__lF::SYNTHESIZED::s:11SwiftSyntax016DeclNameArgumentB0V","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"`as`","kind":"identifier"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2asyqd__Sgqd__mAA0bE0Rd__lF1SL_qd__mfp","text":"S"},{"kind":"text","text":".Type) -> "},{"preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2asyqd__Sgqd__mAA0bE0Rd__lF1SL_qd__mfp","kind":"typeIdentifier","text":"S"},{"kind":"text","text":"?"}],"role":"symbol"},"variants":[{"paths":["\/documentation\/swiftsyntax\/declnameargumentsyntax\/as(_:)-31joy"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"`as`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"_"},{"text":" ","kind":"text"},{"text":"syntaxType","kind":"internalParam"},{"kind":"text","text":": "},{"text":"S","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2asyqd__Sgqd__mAA0bE0Rd__lF1SL_qd__mfp"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2asyqd__Sgqd__mAA0bE0Rd__lF1SL_qd__mfp","text":"S"},{"kind":"text","text":"? "},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"text":"S","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"SyntaxProtocol","kind":"typeIdentifier","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP"}],"platforms":["macOS"]}],"kind":"declarations"},{"content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" since the leaf node cannot be cast to a different specified type.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Discussion","anchor":"discussion"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"This method overloads the general "},{"type":"codeVoice","code":"as"},{"type":"text","text":" method and is marked as deprecated to produce a warning,"},{"text":" ","type":"text"},{"type":"text","text":"informing the user that the cast will always fail."}],"type":"paragraph"}],"style":"note","type":"aside"}]}],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/SyntaxProtocol":{"title":"SyntaxProtocol","abstract":[{"text":"Provide common functionality for specialized syntax nodes. Extend this","type":"text"},{"type":"text","text":" "},{"text":"protocol to provide common functionality for all syntax nodes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","role":"symbol","url":"\/documentation\/swiftsyntax\/syntaxprotocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxProtocol"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"url":"\/documentation\/swiftsyntax","type":"topic","abstract":[],"role":"collection","title":"SwiftSyntax","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/DeclNameArgumentSyntax":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DeclNameArgumentSyntax","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DeclNameArgumentSyntax","kind":"identifier"}],"kind":"symbol","abstract":[],"title":"DeclNameArgumentSyntax","url":"\/documentation\/swiftsyntax\/declnameargumentsyntax","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DeclNameArgumentSyntax"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/DeclNameArgumentSyntax/as(_:)-31joy":{"title":"as(_:)","abstract":[{"type":"text","text":"Attempts to cast the current leaf syntax node to a different specified type."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"`as`","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"S","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2asyqd__Sgqd__mAA0bE0Rd__lF1SL_qd__mfp"},{"text":".Type) -> ","kind":"text"},{"text":"S","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2asyqd__Sgqd__mAA0bE0Rd__lF1SL_qd__mfp","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"type":"topic","kind":"symbol","deprecated":true,"role":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DeclNameArgumentSyntax\/as(_:)-31joy","url":"\/documentation\/swiftsyntax\/declnameargumentsyntax\/as(_:)-31joy"}}}