{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OpaqueReturnTypeOfAttributeArgumentsSyntax\/is(_:)-7gtcr"},"sections":[],"kind":"symbol","schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OpaqueReturnTypeOfAttributeArgumentsSyntax"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`is`"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"syntaxType"},{"text":": ","kind":"text"},{"text":"S","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF1SL_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"kind":"text","text":" "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"text":"SyntaxProtocol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"return-value","level":2,"text":"Return Value","type":"heading"},{"inlineContent":[{"type":"text","text":""},{"code":"false","type":"codeVoice"},{"text":" since the leaf node cannot be cast to a different specified type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This method overloads the general ","type":"text"},{"type":"codeVoice","code":"is"},{"text":" method and is marked as deprecated to produce a warning,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"informing the user that the cast will always fail."}]}],"name":"Note"}],"kind":"content"}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"This cast will always fail","type":"text"}]}],"variants":[{"paths":["\/documentation\/swiftsyntax\/opaquereturntypeofattributeargumentssyntax\/is(_:)-7gtcr"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"roleHeading":"Instance Method","title":"is(_:)","symbolKind":"method","externalID":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF::SYNTHESIZED::s:11SwiftSyntax036OpaqueReturnTypeOfAttributeArgumentsB0V","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`is`","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF1SL_qd__mfp","text":"S"},{"kind":"text","text":".Type) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"extendedModule":"SwiftSyntax","platforms":[{"unavailable":false,"message":"This cast will always fail","deprecated":true,"beta":false}],"modules":[{"name":"SwiftSyntax"}],"role":"symbol"},"abstract":[{"type":"text","text":"Checks if the current leaf syntax node can be cast to a different specified type."}],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"url":"\/documentation\/swiftsyntax","type":"topic","abstract":[],"role":"collection","title":"SwiftSyntax","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/OpaqueReturnTypeOfAttributeArgumentsSyntax/is(_:)-7gtcr":{"title":"is(_:)","url":"\/documentation\/swiftsyntax\/opaquereturntypeofattributeargumentssyntax\/is(_:)-7gtcr","type":"topic","deprecated":true,"abstract":[{"type":"text","text":"Checks if the current leaf syntax node can be cast to a different specified type."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`is`"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF1SL_qd__mfp","text":"S","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OpaqueReturnTypeOfAttributeArgumentsSyntax\/is(_:)-7gtcr"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/OpaqueReturnTypeOfAttributeArgumentsSyntax":{"url":"\/documentation\/swiftsyntax\/opaquereturntypeofattributeargumentssyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OpaqueReturnTypeOfAttributeArgumentsSyntax","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OpaqueReturnTypeOfAttributeArgumentsSyntax","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"text":"OpaqueReturnTypeOfAttributeArgumentsSyntax","kind":"identifier"}],"type":"topic","title":"OpaqueReturnTypeOfAttributeArgumentsSyntax","abstract":[{"text":"The arguments for the ‘@_opaqueReturnTypeOf()’.","type":"text"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/SyntaxProtocol":{"title":"SyntaxProtocol","abstract":[{"text":"Provide common functionality for specialized syntax nodes. Extend this","type":"text"},{"type":"text","text":" "},{"text":"protocol to provide common functionality for all syntax nodes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","role":"symbol","url":"\/documentation\/swiftsyntax\/syntaxprotocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxProtocol"}]}}}