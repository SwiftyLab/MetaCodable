{"schemaVersion":{"major":0,"patch":0,"minor":3},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"This cast will always fail","type":"text"}]}],"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OperatorPrecedenceAndTypesSyntax"]]},"abstract":[{"text":"Checks if the current leaf syntax node can be cast to a different specified type.","type":"text"}],"metadata":{"modules":[{"name":"SwiftSyntax"}],"extendedModule":"SwiftSyntax","platforms":[{"message":"This cast will always fail","unavailable":false,"deprecated":true,"beta":false}],"roleHeading":"Instance Method","title":"is(_:)","role":"symbol","externalID":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF::SYNTHESIZED::s:11SwiftSyntax026OperatorPrecedenceAndTypesB0V","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"`is`","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"text":"S","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF1SL_qd__mfp","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"symbolKind":"method"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`is`","kind":"identifier"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"syntaxType"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF1SL_qd__mfp","text":"S","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"text":"SyntaxProtocol","kind":"typeIdentifier","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP"}],"platforms":["macOS"]}]},{"kind":"content","content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"false","type":"codeVoice"},{"type":"text","text":" since the leaf node cannot be cast to a different specified type."}]}]},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"This method overloads the general ","type":"text"},{"type":"codeVoice","code":"is"},{"type":"text","text":" method and is marked as deprecated to produce a warning,"},{"text":" ","type":"text"},{"text":"informing the user that the cast will always fail.","type":"text"}]}],"name":"Note","type":"aside"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OperatorPrecedenceAndTypesSyntax\/is(_:)-51kij"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftsyntax\/operatorprecedenceandtypessyntax\/is(_:)-51kij"]}],"sections":[],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/OperatorPrecedenceAndTypesSyntax":{"url":"\/documentation\/swiftsyntax\/operatorprecedenceandtypessyntax","navigatorTitle":[{"kind":"identifier","text":"OperatorPrecedenceAndTypesSyntax"}],"abstract":[{"type":"text","text":"A clause to specify precedence group in infix operator declarations, and designated types in any operator declaration."}],"kind":"symbol","role":"symbol","title":"OperatorPrecedenceAndTypesSyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OperatorPrecedenceAndTypesSyntax","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"OperatorPrecedenceAndTypesSyntax"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"url":"\/documentation\/swiftsyntax","type":"topic","abstract":[],"role":"collection","title":"SwiftSyntax","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/SyntaxProtocol":{"title":"SyntaxProtocol","abstract":[{"text":"Provide common functionality for specialized syntax nodes. Extend this","type":"text"},{"type":"text","text":" "},{"text":"protocol to provide common functionality for all syntax nodes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","role":"symbol","url":"\/documentation\/swiftsyntax\/syntaxprotocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxProtocol"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/OperatorPrecedenceAndTypesSyntax/is(_:)-51kij":{"abstract":[{"type":"text","text":"Checks if the current leaf syntax node can be cast to a different specified type."}],"url":"\/documentation\/swiftsyntax\/operatorprecedenceandtypessyntax\/is(_:)-51kij","role":"symbol","deprecated":true,"kind":"symbol","type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OperatorPrecedenceAndTypesSyntax\/is(_:)-51kij","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"`is`","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"text":"S","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF1SL_qd__mfp","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"is(_:)"}}}