{"sections":[],"metadata":{"extendedModule":"SwiftSyntax","modules":[{"name":"SwiftSyntax"}],"symbolKind":"method","roleHeading":"Instance Method","title":"is(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`is`"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}],"platforms":[{"deprecated":true,"unavailable":false,"beta":false,"message":"This cast will always succeed"}],"role":"symbol","externalID":"s:11SwiftSyntax0B8ProtocolPAAE2isySbxmF::SYNTHESIZED::s:11SwiftSyntax017DeclNameArgumentsB0V"},"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DeclNameArgumentsSyntax"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftsyntax\/declnameargumentssyntax\/is(_:)-2go7v"]}],"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"`is`","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"syntaxType"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"}]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"return-value","text":"Return Value"},{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"true"},{"text":" since the node is already of its own type.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This method overloads the general "},{"code":"is","type":"codeVoice"},{"text":" method and is marked as deprecated to produce a warning,","type":"text"},{"text":" ","type":"text"},{"text":"informing the user that the cast will always succeed.","type":"text"}]}],"name":"Note"}],"kind":"content"}],"abstract":[{"type":"text","text":"Checks if the current syntax node can be cast to its own type."}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This cast will always succeed"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DeclNameArgumentsSyntax\/is(_:)-2go7v"},"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"url":"\/documentation\/swiftsyntax","type":"topic","abstract":[],"role":"collection","title":"SwiftSyntax","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/DeclNameArgumentsSyntax":{"title":"DeclNameArgumentsSyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DeclNameArgumentsSyntax","abstract":[],"kind":"symbol","url":"\/documentation\/swiftsyntax\/declnameargumentssyntax","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"DeclNameArgumentsSyntax"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DeclNameArgumentsSyntax"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/DeclNameArgumentsSyntax/is(_:)-2go7v":{"title":"is(_:)","url":"\/documentation\/swiftsyntax\/declnameargumentssyntax\/is(_:)-2go7v","role":"symbol","deprecated":true,"kind":"symbol","type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DeclNameArgumentsSyntax\/is(_:)-2go7v","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`is`"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"abstract":[{"text":"Checks if the current syntax node can be cast to its own type.","type":"text"}]}}}