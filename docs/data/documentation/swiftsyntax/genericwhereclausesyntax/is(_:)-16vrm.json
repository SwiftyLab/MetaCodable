{"kind":"symbol","abstract":[{"text":"Checks if the current syntax node can be cast to its own type.","type":"text"}],"metadata":{"roleHeading":"Instance Method","title":"is(_:)","symbolKind":"method","externalID":"s:11SwiftSyntax0B8ProtocolPAAE2isySbxmF::SYNTHESIZED::s:11SwiftSyntax018GenericWhereClauseB0V","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"`is`","kind":"identifier"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"extendedModule":"SwiftSyntax","platforms":[{"message":"This cast will always succeed","beta":false,"deprecated":true,"unavailable":false}],"role":"symbol","modules":[{"name":"SwiftSyntax"}]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"text":"This cast will always succeed","type":"text"}]}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"`is`","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"syntaxType","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"}]}],"kind":"declarations"},{"content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"text":"","type":"text"},{"code":"true","type":"codeVoice"},{"type":"text","text":" since the node is already of its own type."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"This method overloads the general "},{"type":"codeVoice","code":"is"},{"text":" method and is marked as deprecated to produce a warning,","type":"text"},{"text":" ","type":"text"},{"text":"informing the user that the cast will always succeed.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/GenericWhereClauseSyntax\/is(_:)-16vrm","interfaceLanguage":"swift"},"sections":[],"variants":[{"paths":["\/documentation\/swiftsyntax\/genericwhereclausesyntax\/is(_:)-16vrm"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/GenericWhereClauseSyntax"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"url":"\/documentation\/swiftsyntax","type":"topic","abstract":[],"role":"collection","title":"SwiftSyntax","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/GenericWhereClauseSyntax/is(_:)-16vrm":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"`is`","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"title":"is(_:)","url":"\/documentation\/swiftsyntax\/genericwhereclausesyntax\/is(_:)-16vrm","type":"topic","deprecated":true,"abstract":[{"text":"Checks if the current syntax node can be cast to its own type.","type":"text"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/GenericWhereClauseSyntax\/is(_:)-16vrm","kind":"symbol","role":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/GenericWhereClauseSyntax":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/GenericWhereClauseSyntax","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"GenericWhereClauseSyntax","kind":"identifier"}],"title":"GenericWhereClauseSyntax","navigatorTitle":[{"kind":"identifier","text":"GenericWhereClauseSyntax"}],"abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clause that places additional constraints on generic parameters like ","type":"text"},{"code":"where Element: Hashable","type":"codeVoice"},{"type":"text","text":"."}],"kind":"symbol","type":"topic","url":"\/documentation\/swiftsyntax\/genericwhereclausesyntax"}}}