{"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/ExpressionSegmentSyntax"]]},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This cast will always fail"}]}],"metadata":{"roleHeading":"Instance Method","role":"symbol","externalID":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF::SYNTHESIZED::s:11SwiftSyntax017ExpressionSegmentB0V","title":"is(_:)","platforms":[{"deprecated":true,"beta":false,"message":"This cast will always fail","unavailable":false}],"extendedModule":"SwiftSyntax","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"`is`","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF1SL_qd__mfp","text":"S","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"modules":[{"name":"SwiftSyntax"}]},"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"Checks if the current leaf syntax node can be cast to a different specified type."}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"`is`","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"syntaxType","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"S","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF1SL_qd__mfp","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","text":"SyntaxProtocol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol"}]}],"kind":"declarations"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"false"},{"type":"text","text":" since the leaf node cannot be cast to a different specified type."}],"type":"paragraph"}]},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"content":[{"inlineContent":[{"text":"This method overloads the general ","type":"text"},{"type":"codeVoice","code":"is"},{"text":" method and is marked as deprecated to produce a warning,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"informing the user that the cast will always fail."}],"type":"paragraph"}],"type":"aside","style":"note","name":"Note"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/swiftsyntax\/expressionsegmentsyntax\/is(_:)-9xijv"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/ExpressionSegmentSyntax\/is(_:)-9xijv"},"sections":[],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/ExpressionSegmentSyntax/is(_:)-9xijv":{"role":"symbol","title":"is(_:)","deprecated":true,"url":"\/documentation\/swiftsyntax\/expressionsegmentsyntax\/is(_:)-9xijv","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"`is`"},{"text":"<","kind":"text"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE2isySbqd__mAA0bE0Rd__lF1SL_qd__mfp"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"text":"Checks if the current leaf syntax node can be cast to a different specified type.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/ExpressionSegmentSyntax\/is(_:)-9xijv","type":"topic"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"url":"\/documentation\/swiftsyntax","type":"topic","abstract":[],"role":"collection","title":"SwiftSyntax","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/ExpressionSegmentSyntax":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/ExpressionSegmentSyntax","navigatorTitle":[{"text":"ExpressionSegmentSyntax","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressionSegmentSyntax"}],"url":"\/documentation\/swiftsyntax\/expressionsegmentsyntax","title":"ExpressionSegmentSyntax","abstract":[{"type":"text","text":"An interpolated expression inside a string literal."}],"role":"symbol","kind":"symbol","type":"topic"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/SyntaxProtocol":{"title":"SyntaxProtocol","abstract":[{"text":"Provide common functionality for specialized syntax nodes. Extend this","type":"text"},{"type":"text","text":" "},{"text":"protocol to provide common functionality for all syntax nodes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","role":"symbol","url":"\/documentation\/swiftsyntax\/syntaxprotocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxProtocol"}]}}}