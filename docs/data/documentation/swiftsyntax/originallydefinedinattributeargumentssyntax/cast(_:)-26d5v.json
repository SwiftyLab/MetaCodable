{"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OriginallyDefinedInAttributeArgumentsSyntax"]]},"identifier":{"url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OriginallyDefinedInAttributeArgumentsSyntax\/cast(_:)-26d5v","interfaceLanguage":"swift"},"metadata":{"symbolKind":"method","role":"symbol","roleHeading":"Instance Method","title":"cast(_:)","externalID":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE4castyqd__qd__mAA0bE0Rd__lF::SYNTHESIZED::s:11SwiftSyntax037OriginallyDefinedInAttributeArgumentsB0V","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"cast","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE4castyqd__qd__mAA0bE0Rd__lF1SL_qd__mfp","text":"S"},{"kind":"text","text":".Type) -> "},{"preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE4castyqd__qd__mAA0bE0Rd__lF1SL_qd__mfp","kind":"typeIdentifier","text":"S"}],"extendedModule":"SwiftSyntax","modules":[{"name":"SwiftSyntax"}],"platforms":[{"beta":false,"unavailable":false,"deprecated":true,"message":"This cast will always fail"}]},"sections":[],"kind":"symbol","deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This cast will always fail"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swiftsyntax\/originallydefinedinattributeargumentssyntax\/cast(_:)-26d5v"]}],"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"tokens":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"cast"},{"kind":"text","text":"<"},{"text":"S","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"text":"syntaxType","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"S","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE4castyqd__qd__mAA0bE0Rd__lF1SL_qd__mfp"},{"text":".Type) -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE4castyqd__qd__mAA0bE0Rd__lF1SL_qd__mfp","text":"S"},{"text":" ","kind":"text"},{"kind":"keyword","text":"where"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"S"},{"text":" : ","kind":"text"},{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","text":"SyntaxProtocol","preciseIdentifier":"s:11SwiftSyntax0B8ProtocolP","kind":"typeIdentifier"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"This method will always trigger a runtime crash and never return.","type":"text"}]}],"kind":"content"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"This method overloads the general ","type":"text"},{"type":"codeVoice","code":"cast"},{"text":" method and is marked as deprecated to produce a warning,","type":"text"},{"text":" ","type":"text"},{"text":"informing the user that the cast will always fail.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Invoking this method will lead to a fatal error.","type":"text"}]}],"style":"warning","type":"aside","name":"Warning"}],"kind":"content"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Force-casts the current leaf syntax node to a different specified type.","type":"text"}],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/OriginallyDefinedInAttributeArgumentsSyntax":{"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"OriginallyDefinedInAttributeArgumentsSyntax","kind":"identifier"}],"type":"topic","role":"symbol","url":"\/documentation\/swiftsyntax\/originallydefinedinattributeargumentssyntax","navigatorTitle":[{"kind":"identifier","text":"OriginallyDefinedInAttributeArgumentsSyntax"}],"title":"OriginallyDefinedInAttributeArgumentsSyntax","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OriginallyDefinedInAttributeArgumentsSyntax","abstract":[{"text":"The arguments for the ‘@_originallyDefinedIn’ attribute","type":"text"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/OriginallyDefinedInAttributeArgumentsSyntax/cast(_:)-26d5v":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/OriginallyDefinedInAttributeArgumentsSyntax\/cast(_:)-26d5v","role":"symbol","kind":"symbol","url":"\/documentation\/swiftsyntax\/originallydefinedinattributeargumentssyntax\/cast(_:)-26d5v","type":"topic","title":"cast(_:)","deprecated":true,"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"cast","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"S"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"S","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE4castyqd__qd__mAA0bE0Rd__lF1SL_qd__mfp"},{"text":".Type) -> ","kind":"text"},{"text":"S","kind":"typeIdentifier","preciseIdentifier":"s:11SwiftSyntax05_LeafB12NodeProtocolPAAE4castyqd__qd__mAA0bE0Rd__lF1SL_qd__mfp"}],"abstract":[{"type":"text","text":"Force-casts the current leaf syntax node to a different specified type."}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"url":"\/documentation\/swiftsyntax","type":"topic","abstract":[],"role":"collection","title":"SwiftSyntax","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/SyntaxProtocol":{"title":"SyntaxProtocol","abstract":[{"text":"Provide common functionality for specialized syntax nodes. Extend this","type":"text"},{"type":"text","text":" "},{"text":"protocol to provide common functionality for all syntax nodes.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/SyntaxProtocol","role":"symbol","url":"\/documentation\/swiftsyntax\/syntaxprotocol","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"SyntaxProtocol","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SyntaxProtocol"}]}}}