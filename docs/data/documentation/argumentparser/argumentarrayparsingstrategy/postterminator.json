{"metadata":{"role":"symbol","externalID":"s:14ArgumentParser0A20ArrayParsingStrategyV14postTerminatorACvpZ","roleHeading":"Type Property","modules":[{"name":"ArgumentParser"}],"title":"postTerminator","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"postTerminator","kind":"identifier"},{"kind":"text","text":": "},{"text":"ArgumentArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","kind":"typeIdentifier"}],"symbolKind":"property"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"postTerminator","kind":"identifier"},{"kind":"text","text":": "},{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","text":"ArgumentArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}]}]},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"type":"paragraph","inlineContent":[{"text":"For example, the ","type":"text"},{"code":"Example","type":"codeVoice"},{"text":" command defined below has a ","type":"text"},{"type":"codeVoice","code":"words"},{"type":"text","text":" array that"},{"text":" ","type":"text"},{"text":"uses the ","type":"text"},{"type":"codeVoice","code":"postTerminator"},{"type":"text","text":" parsing strategy:"}]},{"syntax":null,"code":["@main","struct Example: ParsableCommand {","    @Flag var verbose = false","    @Argument var name = \"\"","","    @Argument(parsing: .postTerminator)","    var words: [String]","","    func run() {","        print(words.joined(separator: \"\\n\"))","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Before looking for the ","type":"text"},{"type":"codeVoice","code":"--verbose"},{"type":"text","text":" flag and "},{"type":"codeVoice","code":"<name>"},{"text":" argument, any inputs","type":"text"},{"text":" ","type":"text"},{"text":"after the ","type":"text"},{"code":"--","type":"codeVoice"},{"text":" terminator are captured into the ","type":"text"},{"type":"codeVoice","code":"words"},{"text":" array.","type":"text"}],"type":"paragraph"},{"syntax":null,"type":"codeListing","code":["$ example --verbose Asa -- one two --other","one","two","--other","$ example Asa Extra -- one two --other","Error: Unexpected argument 'Extra'"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because options are parsed before arguments, an option that consumes or"},{"type":"text","text":" "},{"type":"text","text":"suppresses the "},{"code":"--","type":"codeVoice"},{"text":" terminator can prevent a ","type":"text"},{"code":"postTerminator","type":"codeVoice"},{"type":"text","text":" argument"},{"type":"text","text":" "},{"type":"text","text":"array from capturing any input. In particular, the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional"},{"type":"text","text":","},{"type":"text","text":" "},{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArrayParsingStrategy\/unconditionalSingleValue","type":"reference","isActive":true},{"type":"text","text":", and"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","isActive":true},{"text":" parsing strategies can all consume","type":"text"},{"type":"text","text":" "},{"text":"the terminator as part of their values.","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":"This parsing strategy can be surprising for users, since it"},{"text":" ","type":"text"},{"type":"text","text":"changes the behavior of the "},{"type":"codeVoice","code":"--"},{"text":" terminator. Prefer ","type":"text"},{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"text":"whenever possible.","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside","name":"Note"}],"kind":"content"}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator"},"abstract":[{"text":"Before parsing arguments, capture all inputs that follow the ","type":"text"},{"type":"codeVoice","code":"--"},{"text":" ","type":"text"},{"type":"text","text":"terminator in this argument array."}],"variants":[{"paths":["\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArgumentArrayParsingStrategy/postTerminator":{"kind":"symbol","role":"symbol","abstract":[{"text":"Before parsing arguments, capture all inputs that follow the ","type":"text"},{"type":"codeVoice","code":"--"},{"type":"text","text":" "},{"type":"text","text":"terminator in this argument array."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"postTerminator","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","text":"ArgumentArrayParsingStrategy"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/postTerminator","title":"postTerminator","type":"topic","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/postterminator"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArrayParsingStrategy/remaining":{"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"remaining","kind":"identifier"},{"kind":"text","text":": "},{"text":"ArrayParsingStrategy","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArrayParsingStrategy\/remaining","role":"symbol","url":"\/documentation\/argumentparser\/arrayparsingstrategy\/remaining","abstract":[{"type":"text","text":"Parse all remaining arguments into an array."}],"title":"remaining"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArgumentArrayParsingStrategy/remaining":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"remaining","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A20ArrayParsingStrategyV","kind":"typeIdentifier","text":"ArgumentArrayParsingStrategy"}],"type":"topic","role":"symbol","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy\/remaining","title":"remaining","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy\/remaining","abstract":[{"text":"Parse only unprefixed values from the command-line input, ignoring","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"any inputs that have a dash prefix; this is the default strategy."}]},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArrayParsingStrategy/unconditionalSingleValue":{"fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"unconditionalSingleValue","kind":"identifier"},{"kind":"text","text":": "},{"text":"ArrayParsingStrategy","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser20ArrayParsingStrategyV"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArrayParsingStrategy\/unconditionalSingleValue","title":"unconditionalSingleValue","url":"\/documentation\/argumentparser\/arrayparsingstrategy\/unconditionalsinglevalue","abstract":[{"type":"text","text":"Parse the value immediately after the option while allowing repeating options, joining multiple into an array."}],"type":"topic","role":"symbol","kind":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArgumentArrayParsingStrategy":{"title":"ArgumentArrayParsingStrategy","abstract":[{"type":"text","text":"The strategy to use when parsing multiple values from positional arguments"},{"text":" ","type":"text"},{"text":"into an array.","type":"text"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentArrayParsingStrategy","kind":"symbol","url":"\/documentation\/argumentparser\/argumentarrayparsingstrategy","role":"symbol","navigatorTitle":[{"text":"ArgumentArrayParsingStrategy","kind":"identifier"}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"ArgumentArrayParsingStrategy","kind":"identifier"}]},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/SingleValueParsingStrategy/unconditional":{"title":"unconditional","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/SingleValueParsingStrategy\/unconditional","url":"\/documentation\/argumentparser\/singlevalueparsingstrategy\/unconditional","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"unconditional"},{"kind":"text","text":": "},{"preciseIdentifier":"s:14ArgumentParser26SingleValueParsingStrategyV","text":"SingleValueParsingStrategy","kind":"typeIdentifier"}],"abstract":[{"text":"Parse the next input, even if it could be interpreted as an option or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"flag."}]},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser":{"kind":"symbol","role":"collection","url":"\/documentation\/argumentparser","abstract":[],"title":"ArgumentParser","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser","type":"topic"}}}