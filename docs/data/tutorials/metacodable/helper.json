{"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}]}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage"},"sections":[{"xcodeRequirement":"Xcode 15 or later","estimatedTimeInMinutes":20,"kind":"hero","chapter":"Advanced MetaCodable","content":[{"inlineContent":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"type":"paragraph"}],"title":"Add common decoding\/encoding customizations"},{"kind":"tasks","tasks":[{"title":"Decode\/Encode basic value types without type check","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"i.e. if expected "},{"code":"Int","type":"codeVoice"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"Bool"},{"type":"text","text":" type data is coming as "},{"type":"codeVoice","code":"String"},{"text":", the data can be converted to expected type.","type":"text"}]}],"mediaPosition":"trailing"}],"anchor":"DecodeEncode-basic-value-types-without-type-check","stepsSection":[{"caption":[],"runtimePreview":null,"media":"Product.png","code":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify data with unpredictable type and can be mapped to an expected type."}]}]},{"caption":[],"type":"step","media":null,"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as expected type."}],"type":"paragraph"}],"code":"Product-01.swift","runtimePreview":"Product.png"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" on properties to indicate the type mapping transformation."}]}],"type":"step","runtimePreview":"Product.png","code":"Product-02.swift","caption":[]}]},{"contentSection":[{"content":[{"inlineContent":[{"text":"This tutorial guides you through decoding\/encoding ","type":"text"},{"type":"codeVoice","code":"Date"},{"text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in ","type":"text"},{"type":"codeVoice","code":"ISO8601"},{"text":" like text formats.","type":"text"}],"type":"paragraph"}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"anchor":"DecodeEncode-date-representations","stepsSection":[{"media":"Date.png","type":"step","runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Identify date formats represented in data.","type":"text"}],"type":"paragraph"}],"code":null},{"type":"step","media":null,"caption":[],"runtimePreview":"Date.png","code":"Date-01.swift","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields as ","type":"text"},{"code":"Date","type":"codeVoice"},{"type":"text","text":" type."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"Since1970DateCoder"},{"type":"text","text":" to decode\/encode UNIX timestamp."}]}],"type":"step","media":null,"runtimePreview":"Date.png","caption":[],"code":"Date-02.swift"},{"runtimePreview":"Date.png","content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"ISO8601DateCoder"},{"type":"text","text":" to decode\/encode date represented in "},{"type":"codeVoice","code":"ISO8601"},{"type":"text","text":" standard."}],"type":"paragraph"}],"type":"step","caption":[],"media":null,"code":"Date-03.swift"},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"DateCoder"},{"type":"text","text":" to decode\/encode date represented in custom formats by providing the formatter."}]}],"media":null,"code":"Date-04.swift","runtimePreview":"Date.png"}],"title":"Decode\/Encode date representations"},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values."}]}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"title":"Decode\/Encode sequence of values","anchor":"DecodeEncode-sequence-of-values","stepsSection":[{"runtimePreview":null,"caption":[],"media":"Data.png","content":[{"inlineContent":[{"type":"text","text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data."}],"type":"paragraph"}],"code":null,"type":"step"},{"type":"step","runtimePreview":"Data.png","content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type with the fields as the required sequence type."}],"type":"paragraph"}],"caption":[],"media":null,"code":"Data-01.swift"},{"caption":[],"runtimePreview":"Data.png","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"SequenceCoder"},{"type":"text","text":" and provide "},{"code":"elementHelper","type":"codeVoice"},{"type":"text","text":" "},{"code":"HelperCoder","type":"codeVoice"},{"type":"text","text":" to customize decoding\/encoding of each element."}]}],"code":"Data-02.swift","type":"step"},{"caption":[],"media":null,"runtimePreview":"Data.png","code":"Data-03.swift","content":[{"inlineContent":[{"type":"text","text":"Provide "},{"type":"codeVoice","code":"lossy"},{"text":" in ","type":"text"},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" to ignore invalid element data instead of failing."}],"type":"paragraph"}],"type":"step"},{"media":null,"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Provide "},{"type":"codeVoice","code":"default"},{"text":" value in ","type":"text"},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" to be used in case provided data is not of sequence type or empty sequence data provided."}],"type":"paragraph"}],"type":"step","code":"Data-04.swift","runtimePreview":"Data.png"}]},{"anchor":"Create-custom-advanced-customizations","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that arenâ€™t provided by this library."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding."}]}]}],"stepsSection":[{"media":"User.png","code":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify data with different key in decoding and encoding."}]}],"caption":[],"runtimePreview":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" type with the fields according to the data.","type":"text"}]}],"type":"step","caption":[],"media":null,"code":"User-01.swift","runtimePreview":"User.png"},{"runtimePreview":"User.png","type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create custom "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true,"type":"reference"},{"text":" type that accepts decoding and encoding key values.","type":"text"}]}],"code":"User-02.swift"},{"content":[{"inlineContent":[{"type":"text","text":"Create custom "},{"type":"codeVoice","code":"CodingKey"},{"text":" type to be used for decoding\/encoding from provided string values.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"User-03.swift","runtimePreview":"User.png","type":"step"},{"media":null,"runtimePreview":"User.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Provide ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"text":" implementations for ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)"},{"type":"text","text":" for decoding and encoding with provided key values."}]}],"caption":[],"code":"User-04.swift"},{"runtimePreview":"User.png","code":"User-05.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Use the created custom "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference"},{"type":"text","text":" with "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","type":"reference"},{"type":"text","text":" macro to use the decoding\/encoding customization."}],"type":"paragraph"}],"caption":[],"media":null},{"content":[{"inlineContent":[{"type":"text","text":"Apply "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" macro without any arguments, to the property to pass the typeâ€™s "},{"code":"init(from:)","type":"codeVoice"},{"text":" ","type":"text"},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" argument to the custom "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}],"media":null,"caption":[],"code":"User-06.swift","runtimePreview":"User.png","type":"step"}],"title":"Create custom advanced customizations"}]},{"kind":"callToAction","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"title":"Represent dynamic data variations with protocol","featuredEyebrow":"Tutorial","action":{"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","overridingTitle":"Get started","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","isActive":true}}],"kind":"project","variants":[{"paths":["\/tutorials\/metacodable\/helper"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"categoryPathComponent":"Usage","category":"Discover MetaCodable","title":"Add common decoding\/encoding customizations","role":"project"},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"kind":"project","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","type":"topic","title":"Use with general-purpose Swift types","url":"\/tutorials\/metacodable\/essential","role":"project","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","title":"Represent variations in data","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"project","type":"topic","url":"\/tutorials\/metacodable\/enum","kind":"project"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","role":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","title":"Advanced MetaCodable","type":"topic","kind":"article","abstract":[]},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","type":"section","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}]},"Date-02.swift":{"highlights":[{"line":2},{"line":7}],"fileType":"swift","syntax":"swift","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"type":"file","fileName":"Date.swift","identifier":"Date-02.swift"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"type":"topic","kind":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":"...)"}],"title":"CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}]},"User-01.swift":{"fileType":"swift","syntax":"swift","highlights":[],"content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"type":"file","identifier":"User-01.swift","fileName":"User.swift"},"Data-01.swift":{"syntax":"swift","fileType":"swift","identifier":"Data-01.swift","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"highlights":[],"type":"file","fileName":"Data.swift"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"role":"symbol","url":"\/documentation\/metacodable\/helpercoder\/coded","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"Coded","kind":"identifier"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","kind":"symbol","type":"topic","abstract":[{"text":"The actual type of value that is going to be decoded\/encoded.","type":"text"}],"title":"Coded","required":true},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"kind":"section","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"title":"Create Codable enums with adjacent tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","role":"pseudoSymbol","type":"section","kind":"section"},"Product.png":{"variants":[{"url":"\/images\/MetaCodable\/Product.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Product~dark.png"}],"type":"image","alt":"List of products with inconsistent property types","identifier":"Product.png"},"Date-01.swift":{"highlights":[],"fileType":"swift","syntax":"swift","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"type":"file","fileName":"Date.swift","identifier":"Date-01.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"section","title":"Decode\/Encode date representations","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section","type":"section"},"Data-04.swift":{"fileType":"swift","syntax":"swift","highlights":[{"line":10},{"line":11},{"line":12}],"content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([]),","            ]","        )","    )","    let messages: [Data]","}"],"type":"file","identifier":"Data-04.swift","fileName":"Data.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"section","type":"section"},"User-04.swift":{"syntax":"swift","fileType":"swift","identifier":"User-04.swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"type":"file","fileName":"User.swift"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies":{"type":"topic","url":"\/tutorials\/metacodable\/commonstrategies","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","abstract":[{"text":"Learn how to apply strategies like ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}],"estimatedTime":"10min","kind":"project","title":"Using Common Strategies","role":"project"},"Product-02.swift":{"syntax":"swift","fileType":"swift","type":"file","content":["import MetaCodable","","@Codable(commonStrategies: [.codedBy(.valueCoder())])","struct Product {","    let sku: Int","    let inStock: Bool","    let name: String","    let price: Double","}"],"fileName":"Product.swift","identifier":"Product-02.swift","highlights":[{"line":3}]},"doc://MetaCodable/tutorials/Usage":{"type":"topic","url":"\/tutorials\/usage","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"kind":"overview","title":"Discover MetaCodable","role":"overview"},"Date-04.swift":{"syntax":"swift","fileType":"swift","identifier":"Date-04.swift","content":["import Foundation","import HelperCoders","import MetaCodable","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"type":"file","fileName":"Date.swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","kind":"project","url":"\/tutorials\/metacodable\/dynamic","title":"Represent dynamic data variations with protocol","estimatedTime":"20min","type":"topic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"project"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Check-Your-Understanding":{"titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding","type":"link","url":"\/tutorials\/metacodable\/commonstrategies#Check-Your-Understanding","title":"Check Your Understanding"},"Data-02.swift":{"identifier":"Data-02.swift","fileType":"swift","fileName":"Data.swift","syntax":"swift","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"highlights":[{"line":2},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}],"type":"file"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"title":"MetaCodable essentials","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","role":"article","type":"topic","kind":"article"},"Xcode 15 or later":{"url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","identifier":"Xcode 15 or later","type":"xcodeRequirement","title":"Xcode 15 or later"},"User.png":{"identifier":"User.png","type":"image","variants":[{"url":"\/images\/MetaCodable\/User.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/User~dark.png","traits":["1x","dark"]}],"alt":"User data with different key in decoding and encoding"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"type":"topic","title":"HelperCoder","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"HelperCoder","kind":"identifier"}],"url":"\/documentation\/metacodable\/helpercoder","abstract":[{"text":"A type that helps to decode and encode underlying ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"text":" type","type":"text"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" respectively."}],"kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"encode"},{"kind":"text","text":"("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Coded","preciseIdentifier":"s:11MetaCodable11HelperCoderP5CodedQa"},{"text":", ","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": any ","kind":"text"},{"kind":"typeIdentifier","text":"Encoder","preciseIdentifier":"s:s7EncoderP"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"}],"title":"encode(_:to:)","defaultImplementations":2,"abstract":[{"text":"Encodes given value of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"text":" type to the provided ","type":"text"},{"type":"codeVoice","code":"encoder"},{"type":"text","text":"."}],"url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)","kind":"symbol","required":true,"type":"topic","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Applying-Common-Strategies":{"type":"section","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"type":"codeVoice","code":"ValueCoder"},{"text":" to all properties automatically.","type":"text"}],"kind":"section","url":"\/tutorials\/metacodable\/commonstrategies#Applying-Common-Strategies","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies","title":"Applying Common Strategies","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"abstract":[{"type":"text","text":"This tutorial guides you through"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"section","title":"Share common Codable fields","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields"},"User-02.swift":{"fileType":"swift","type":"file","fileName":"User.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"identifier":"User-02.swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codedby(_:)","type":"topic","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"title":"CodedBy(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"section","title":"Create dynamic variation Codable types","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"title":"Customize field decoding\/encoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Available-Common-Strategies":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/commonstrategies#Available-Common-Strategies","title":"Available Common Strategies","abstract":[{"text":"Learn how to apply strategies like ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}],"kind":"section","type":"section"},"Data-03.swift":{"identifier":"Data-03.swift","fileType":"swift","fileName":"Data.swift","syntax":"swift","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"highlights":[{"line":9},{"line":10}],"type":"file"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"section","title":"Decode\/Encode sequence of values","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values"},"Product-01.swift":{"fileName":"Product.swift","identifier":"Product-01.swift","highlights":[],"content":["import HelperCoders","import MetaCodable","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","    @CodedBy(ValueCoder<String>())","    let name: String","    @CodedBy(ValueCoder<Double>())","    let price: Double","}"],"syntax":"swift","type":"file","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","type":"topic","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper","role":"project","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}]},"Data.png":{"identifier":"Data.png","type":"image","variants":[{"url":"\/images\/MetaCodable\/Data.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Data~dark.png","traits":["1x","dark"]}],"alt":"Base64 data sequence data"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"title":"Create Codable enums with external tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","role":"pseudoSymbol","type":"section","kind":"section"},"User-03.swift":{"fileType":"swift","type":"file","fileName":"User.swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"identifier":"User-03.swift","syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"]},"User-05.swift":{"fileName":"User.swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"fileType":"swift","identifier":"User-05.swift","syntax":"swift","type":"file"},"Date-03.swift":{"fileName":"Date.swift","identifier":"Date-03.swift","highlights":[{"line":9}],"syntax":"swift","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"],"fileType":"swift","type":"file"},"Date.png":{"alt":"Data with date formats varying for each property","identifier":"Date.png","variants":[{"url":"\/images\/MetaCodable\/Date.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Date~dark.png","traits":["1x","dark"]}],"type":"image"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"title":"decode(from:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"decode"},{"kind":"text","text":"("},{"kind":"externalParam","text":"from"},{"text":": any ","kind":"text"},{"preciseIdentifier":"s:s7DecoderP","text":"Decoder","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Coded","preciseIdentifier":"s:11MetaCodable11HelperCoderP5CodedQa","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Decodes a value of the "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","type":"reference"},{"text":" type from the given ","type":"text"},{"code":"decoder","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","kind":"symbol","required":true,"role":"symbol","url":"\/documentation\/metacodable\/helpercoder\/decode(from:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)"},"User-06.swift":{"fileName":"User.swift","identifier":"User-06.swift","highlights":[{"line":11}],"syntax":"swift","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileType":"swift","type":"file"}}}