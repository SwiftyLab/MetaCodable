{"hierarchy":{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding","kind":"assessment"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}]}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection"}]}]}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"title":"Use with general-purpose Swift types","categoryPathComponent":"Usage","role":"project","category":"Discover MetaCodable"},"kind":"project","sections":[{"kind":"hero","title":"Use with general-purpose Swift types","xcodeRequirement":"Xcode 15 or later","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"creating equivalent types for decoding\/encoding."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"customizing fieldâ€™s "},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"fallback field value when decoding fails"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"ignoring fields from decoding\/encoding."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"share common data across "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types."}]}]}]}],"chapter":"MetaCodable essentials","estimatedTimeInMinutes":10},{"tasks":[{"title":"Create Codable type and customize CodingKey of fields","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"The simplest way to generate ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation is to attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","isActive":true,"type":"reference"},{"text":" macro to type definition, provided all its properties using types that are already ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"These types include standard library types like "},{"type":"codeVoice","code":"String"},{"type":"text","text":", "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Foundation"},{"type":"text","text":" types like "},{"type":"codeVoice","code":"Date"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", and "},{"type":"codeVoice","code":"URL"},{"text":". Any type whose properties are ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" automatically conforms to "},{"code":"Codable","type":"codeVoice"},{"text":" just by attaching this macro.","type":"text"}]},{"inlineContent":[{"type":"codeVoice","code":"CodingKey"},{"text":" of each field can be customized individually using ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":" macros. Optionally, global field case style can be declared using "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"anchor":"Create-Codable-type-and-customize-CodingKey-of-fields","stepsSection":[{"type":"step","runtimePreview":null,"code":null,"media":"Post-01.png","content":[{"type":"paragraph","inlineContent":[{"text":"Analyze fields and their data types from data.","type":"text"}]}],"caption":[]},{"code":"Post-01.swift","content":[{"inlineContent":[{"text":"Create equivalent ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"class","type":"codeVoice"},{"type":"text","text":" with field name same as in data and type equivalent to encoded data type."}],"type":"paragraph"}],"runtimePreview":"Post-01.png","type":"step","caption":[],"media":null},{"content":[{"inlineContent":[{"type":"text","text":"Attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","type":"reference","isActive":true},{"text":" macro to type definition.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"code":"Post-02.swift","runtimePreview":"Post-01.png","media":null},{"runtimePreview":"Post-01.png","content":[{"inlineContent":[{"type":"text","text":"Provide custom "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" value to use to "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"type":"text","text":" macro attached to said field."}],"type":"paragraph"}],"media":null,"code":"Post-03.swift","caption":[],"type":"step"},{"caption":[],"type":"step","runtimePreview":"Post-04.png","media":null,"code":"Post-04.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Provide each ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" path components in order, to ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"type":"text","text":" macro for decoding nested field at path."}]}]},{"code":"Post-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Last "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path component can be omitted if it is same as field name by using "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true,"type":"reference"},{"text":" macro.","type":"text"}]}],"media":null,"runtimePreview":"Post-04.png","caption":[],"type":"step"},{"media":null,"caption":[],"code":"Post-06.swift","type":"step","content":[{"inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)"},{"text":" macro to specify multiple possible ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"s for a single field."}],"type":"paragraph"}],"runtimePreview":"Post-06.png"},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"text":" macro to specify ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" case style while using different case style for field name."}]}],"media":null,"code":"Post-07.swift","type":"step","runtimePreview":"Post-07.png"}]},{"title":"Customize field decoding\/encoding","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Following level of customizations are possible:"}]},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Provide default value for fields to be used when decoding fails with "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","type":"reference"},{"type":"text","text":" macro."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore both decoding and encoding with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()"},{"type":"text","text":" macro per fields and ignore only decoding or encoding with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","type":"reference","isActive":true},{"text":" or ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" macros per fields respectively."}]}]},{"content":[{"inlineContent":[{"text":"Ignore all initialized fields for a type from decoding\/encoding with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"reference"},{"text":" macro.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"}]}],"stepsSection":[{"code":"Post-08.swift","type":"step","content":[{"inlineContent":[{"text":"Provide default value per field if decoding fails due to missing or invalid data.","type":"text"}],"type":"paragraph"}],"caption":[],"runtimePreview":"Post-06.png","media":null},{"content":[{"inlineContent":[{"text":"Ignore fields from decoding or encoding or both with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true},{"text":" respectively.","type":"text"}],"type":"paragraph"}],"runtimePreview":"Post-06.png","caption":[],"media":null,"type":"step","code":"Post-09.swift"},{"caption":[],"type":"step","runtimePreview":"Post-06.png","media":null,"code":"Post-10.swift","content":[{"inlineContent":[{"type":"text","text":"Ignore all initialized fields from decoding and encoding by attaching "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","type":"reference","isActive":true},{"type":"text","text":" macro to type definition."}],"type":"paragraph"}]},{"type":"step","code":"Post-11.swift","caption":[],"runtimePreview":"Post-11.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow specific initialized field decoding and encoding by attaching any of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":"\/"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":"\/"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"text":"\/","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macros."}]}],"media":null},{"media":null,"caption":[],"code":"Post-12.swift","content":[{"inlineContent":[{"type":"text","text":"Attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true,"type":"reference"},{"text":" or ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"text":" macro to initialized field for only suppressing decoding or encoding respectively.","type":"text"}],"type":"paragraph"}],"type":"step","runtimePreview":"Post-11.png"}],"anchor":"Customize-field-decodingencoding"},{"stepsSection":[{"code":null,"runtimePreview":null,"media":"Post-13.png","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify fields that are common across multiple data."}]}]},{"code":"Post-13.swift","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Create equivalent "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type with fields representing common data."}],"type":"paragraph"}],"runtimePreview":"Post-13.png","type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Create equivalent "},{"code":"Codable","type":"codeVoice"},{"text":" type for each specific post category only with fields representing category specific data.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"code":"Post-14.swift","type":"step","runtimePreview":"Post-13.png"},{"type":"step","code":"Post-15.swift","runtimePreview":"Post-13.png","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add common post data field to each specific post category, field name doesnâ€™t matter here."}]}],"caption":[]},{"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" without any arguments to common post data field to directly decode common post fields data ignoring the key for each category."}]}],"caption":[],"media":null,"code":"Post-16.swift","runtimePreview":"Post-13.png"}],"title":"Share common Codable fields","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Common "},{"code":"Codable","type":"codeVoice"},{"text":" fields can be extracted to a separate type to be shared across other ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" types."}]}],"kind":"contentAndMedia"}],"anchor":"Share-common-Codable-fields"}],"kind":"tasks"},{"kind":"callToAction","featuredEyebrow":"Tutorial","title":"Using Common Strategies","abstract":[{"text":"Learn how to apply strategies like ","type":"text"},{"code":"ValueCoder","type":"codeVoice"},{"text":" to all properties automatically.","type":"text"}],"action":{"isActive":true,"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","type":"reference","overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]}}],"variants":[{"paths":["\/tutorials\/metacodable\/essential"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","interfaceLanguage":"swift"},"references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the attached type\/enum-case will be ignored for decoding\/encoding."}],"url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"kind":"text","text":"()"}],"role":"symbol","kind":"symbol","title":"IgnoreCodingInitialized()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"topic","url":"\/documentation\/metacodable\/ignorecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"role":"symbol","title":"IgnoreCoding()"},"Post-11.swift":{"type":"file","identifier":"Post-11.swift","syntax":"swift","fileType":"swift","highlights":[{"line":16},{"line":17}],"fileName":"Post.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    var deliveredTime: Double = Date().timeIntervalSince1970","}"]},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"kind":"project","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","type":"topic","title":"Use with general-purpose Swift types","url":"\/tutorials\/metacodable\/essential","role":"project","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"Post-16.swift":{"identifier":"Post-16.swift","syntax":"swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":15},{"line":22},{"line":30}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    @CodedAt","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    @CodedAt","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    @CodedAt","    let base: Post","    let url: String","    let duration: Float","}"]},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Available-Common-Strategies":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/commonstrategies#Available-Common-Strategies","title":"Available Common Strategies","abstract":[{"text":"Learn how to apply strategies like ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}],"kind":"section","type":"section"},"Post-01.png":{"identifier":"Post-01.png","alt":"Basic post JSON representation","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Post-01.png"},{"url":"\/images\/MetaCodable\/Post-01~dark.png","traits":["1x","dark"]}],"type":"image"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies":{"type":"topic","url":"\/tutorials\/metacodable\/commonstrategies","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","abstract":[{"text":"Learn how to apply strategies like ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}],"estimatedTime":"10min","kind":"project","title":"Using Common Strategies","role":"project"},"Post-14.swift":{"identifier":"Post-14.swift","syntax":"swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let text: String","}","","@Codable","struct PicturePost {","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let url: String","    let duration: Float","}"]},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"title":"MetaCodable essentials","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","role":"article","type":"topic","kind":"article"},"Post-10.swift":{"type":"file","identifier":"Post-10.swift","syntax":"swift","fileType":"swift","highlights":[{"line":5}],"fileName":"Post.swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","}"]},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Default","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/metacodable\/default(_:)","kind":"symbol","title":"Default(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","role":"symbol","abstract":[{"text":"Provides a ","type":"text"},{"type":"codeVoice","code":"default"},{"type":"text","text":" value to be used when decoding fails and"},{"type":"text","text":" "},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}],"type":"topic"},"Post-13.png":{"identifier":"Post-13.png","alt":"Multi-category post JSON representation","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Post-13.png"},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-13~dark.png"}],"type":"image"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Check-Your-Understanding":{"titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"title":"Check Your Understanding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding","url":"\/tutorials\/metacodable\/commonstrategies#Check-Your-Understanding","type":"link"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"url":"\/documentation\/metacodable\/ignoreencoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","title":"IgnoreEncoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"Post-11.png":{"identifier":"Post-11.png","alt":"Basic post JSON representation with author and creation time with delivered time only when encoded","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Post-11.png"},{"url":"\/images\/MetaCodable\/Post-11~dark.png","traits":["1x","dark"]}],"type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"title":"Create Codable enums with adjacent tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","role":"pseudoSymbol","type":"section","kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"section","title":"Decode\/Encode date representations","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"section","title":"Create dynamic variation Codable types","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","type":"topic","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper","role":"project","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}]},"Post-15.swift":{"highlights":[{"line":15},{"line":21},{"line":28}],"syntax":"swift","type":"file","fileType":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let base: Post","    let url: String","    let duration: Float","}"],"fileName":"Post.swift","identifier":"Post-15.swift"},"Post-09.swift":{"identifier":"Post-09.swift","syntax":"swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":14},{"line":15}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    @IgnoreCoding","    var interacted: Bool = false","}"]},"doc://MetaCodable/documentation/MetaCodable/Codable(commonStrategies:)":{"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Codable","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"commonStrategies"},{"kind":"text","text":": ["},{"text":"CodableCommonStrategy","preciseIdentifier":"s:11MetaCodable0B14CommonStrategyV","kind":"typeIdentifier"},{"kind":"text","text":"])"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","title":"Codable(commonStrategies:)","type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codable(commonstrategies:)","abstract":[{"text":"Generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementation of "},{"type":"codeVoice","code":"struct"},{"type":"text","text":", "},{"code":"class","type":"codeVoice"},{"type":"text","text":", "},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"actor"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"protocol"},{"type":"text","text":" types by leveraging custom attributes provided on variable"},{"type":"text","text":" "},{"type":"text","text":"declarations."}]},"Post-04.png":{"identifier":"Post-04.png","alt":"Basic post JSON representation with author","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Post-04.png"},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-04~dark.png"}],"type":"image"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","role":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","title":"Advanced MetaCodable","type":"topic","kind":"article","abstract":[]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"kind":"section","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"title":"Create Codable enums with external tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","role":"pseudoSymbol","type":"section","kind":"section"},"Post-13.swift":{"fileType":"swift","type":"file","highlights":[],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}"],"syntax":"swift","fileName":"Post.swift","identifier":"Post-13.swift"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Applying-Common-Strategies":{"type":"section","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"type":"codeVoice","code":"ValueCoder"},{"text":" to all properties automatically.","type":"text"}],"kind":"section","url":"\/tutorials\/metacodable\/commonstrategies#Applying-Common-Strategies","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies","title":"Applying Common Strategies","role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"type":"topic","kind":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":"...)"}],"title":"CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"section","title":"Decode\/Encode sequence of values","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","type":"section","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section","type":"section"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreDecoding"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","title":"IgnoreDecoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedBy"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":")"}],"url":"\/documentation\/metacodable\/codedby(_:)","type":"topic","abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"type":"text","text":" "},{"type":"text","text":"encoded by the provided "},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"title":"CodedBy(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},"Post-06.swift":{"fileName":"Post.swift","identifier":"Post-06.swift","highlights":[{"line":7}],"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"type":"file","fileType":"swift","syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","title":"Represent variations in data","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"project","type":"topic","url":"\/tutorials\/metacodable\/enum","kind":"project"},"Post-07.png":{"identifier":"Post-07.png","alt":"Basic post JSON representation with author and creation time","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Post-07.png"},{"url":"\/images\/MetaCodable\/Post-07~dark.png","traits":["1x","dark"]}],"type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"section","type":"section"},"Post-02.swift":{"fileName":"Post.swift","identifier":"Post-02.swift","highlights":[{"line":1},{"line":2},{"line":3}],"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"type":"file","fileType":"swift","syntax":"swift"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedas(_:_:)","title":"CodedAs(_:_:)","type":"topic","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"text":" ","type":"text"},{"type":"text","text":"additional variable "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"...)","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","title":"CodedIn(_:)","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"text":" ","type":"text"},{"type":"text","text":"container "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided with field name as final"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedIn"},{"text":"(","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":"...)"}]},"Post-07.swift":{"identifier":"Post-07.swift","syntax":"swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":4},{"line":11}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"]},"Post-01.swift":{"fileName":"Post.swift","identifier":"Post-01.swift","highlights":[],"content":["struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"type":"file","fileType":"swift","syntax":"swift"},"Post-04.swift":{"fileType":"swift","type":"file","highlights":[{"line":9},{"line":10}],"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedAt(\"created_by\", \"author\")","    let author: String","}"],"syntax":"swift","fileName":"Post.swift","identifier":"Post-04.swift"},"Post-08.swift":{"fileName":"Post.swift","identifier":"Post-08.swift","highlights":[],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"type":"file","fileType":"swift","syntax":"swift"},"Post-03.swift":{"fileType":"swift","type":"file","highlights":[{"line":6},{"line":7}],"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","}"],"syntax":"swift","fileName":"Post.swift","identifier":"Post-03.swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","kind":"project","url":"\/tutorials\/metacodable\/dynamic","title":"Represent dynamic data variations with protocol","estimatedTime":"20min","type":"topic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"project"},"doc://MetaCodable/tutorials/Usage":{"type":"topic","url":"\/tutorials\/usage","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"kind":"overview","title":"Discover MetaCodable","role":"overview"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"abstract":[{"type":"text","text":"This tutorial guides you through"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"section","title":"Share common Codable fields","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields"},"Post-06.png":{"identifier":"Post-06.png","alt":"Basic post JSON representation with author and creation time","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Post-06.png"},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-06~dark.png"}],"type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}]},"Post-12.swift":{"fileType":"swift","type":"file","highlights":[{"line":17}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    @IgnoreDecoding","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"syntax":"swift","fileName":"Post.swift","identifier":"Post-12.swift"},"Xcode 15 or later":{"title":"Xcode 15 or later","identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","type":"xcodeRequirement"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"title":"Customize field decoding\/encoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","type":"section"},"Post-05.swift":{"fileType":"swift","type":"file","highlights":[{"line":9}],"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"syntax":"swift","fileName":"Post.swift","identifier":"Post-05.swift"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the provided case format."}],"url":"\/documentation\/metacodable\/codingkeys(_:)","role":"symbol","title":"CodingKeys(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"text":"CodingKeyNameStrategy","kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"text":")","kind":"text"}],"type":"topic"}}}