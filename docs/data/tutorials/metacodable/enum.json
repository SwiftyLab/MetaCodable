{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/enum"]}],"hierarchy":{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies"},{"kind":"assessment","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding"}]},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}]}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]]},"kind":"project","sections":[{"kind":"hero","chapter":"MetaCodable essentials","estimatedTimeInMinutes":10,"title":"Represent variations in data","xcodeRequirement":"Xcode 15 or later","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}]}]},{"kind":"tasks","tasks":[{"title":"Create Codable enums with external tag","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"This is default representation of ","type":"text"},{"code":"enum","type":"codeVoice"},{"type":"text","text":" in "},{"code":"MetaCodable","type":"codeVoice"},{"text":", where variation can be identified with the value of the key.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Since the data is keyed by the tag, variation is known before the content is being parsed."}]}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"step","media":"Command-01.png","code":null,"content":[{"inlineContent":[{"text":"Identify all the variations and the tags representing variations.","type":"text"}],"type":"paragraph"}],"caption":[],"runtimePreview":null},{"media":null,"runtimePreview":"Command-01.png","code":"Command-01.swift","content":[{"inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" "},{"code":"enum","type":"codeVoice"},{"text":" with each case representing each variation, with case name synonymous to tag value.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[]},{"media":null,"runtimePreview":"Command-01.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add variation data to each case as associated values with label representing field name and value type as field type."}]}],"code":"Command-02.swift","type":"step"},{"media":null,"type":"step","caption":[],"runtimePreview":"Command-01.png","code":"Command-03.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Secondary label can be used as field name as well, to allow not specifying explicit label when creating case value."}]}]},{"caption":[],"type":"step","media":null,"content":[{"inlineContent":[{"type":"text","text":"Variation tag values can be declared explicitly by attaching "},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference"},{"text":" macro to the case.","type":"text"}],"type":"paragraph"}],"code":"Command-04.swift","runtimePreview":"Command-01.png"},{"caption":[],"type":"step","media":null,"code":"Command-05.swift","content":[{"type":"paragraph","inlineContent":[{"text":"In case of multiple variation data fields, variation specific ","type":"text"},{"type":"codeVoice","code":"struct"},{"type":"text","text":" or "},{"code":"class","type":"codeVoice"},{"type":"text","text":" type can be created, and created type can be added to enum-case as associated value without any label."}]}],"runtimePreview":"Command-01.png"},{"media":null,"runtimePreview":"Command-01.png","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Ignore specific case from decoding or encoding or both by attaching ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"text":" or ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true,"type":"reference"},{"type":"text","text":" macros respectively."}]}],"code":"Command-06.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true},{"text":" macro to specify ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" case style per case while using different case style for associated value label."}]}],"type":"step","caption":[],"media":null,"runtimePreview":"Command-07.png","code":"Command-07.swift"}],"anchor":"Create-Codable-enums-with-external-tag"},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"In this case the tag value identifying variant is inside the content, next to any other fields.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The tag value is present at a specific field common across all the variations. "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":" supports any type of value for tag default being "},{"type":"codeVoice","code":"String"},{"text":".","type":"text"}]}]}],"anchor":"Create-Codable-enums-with-internal-tag","stepsSection":[{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Identify all the variations by the tags representing variations and the field for the tag value.","type":"text"}]}],"media":"Command-08.png","code":null,"runtimePreview":null},{"runtimePreview":"Command-08.png","media":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"codeVoice","code":"enum"},{"type":"text","text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section."}]}],"code":"Command-02.swift","caption":[]},{"code":"Command-08.swift","type":"step","media":null,"runtimePreview":"Command-08.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference","isActive":true},{"text":" macro to ","type":"text"},{"code":"enum","type":"codeVoice"},{"type":"text","text":" type definition with value specifying tag field name."}]}]},{"content":[{"inlineContent":[{"text":"If tag value type differs from ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type, specify explicitly with ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","isActive":true},{"type":"text","text":" macro attached to "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" type definition."}],"type":"paragraph"}],"type":"step","caption":[],"runtimePreview":"Command-08.png","code":"Command-09.swift","media":null},{"code":"Command-10.swift","runtimePreview":"Command-08.png","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"If tag values differ from case name, specify explicitly with ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true},{"type":"text","text":" macro attached to the case."}]}],"type":"step"}],"title":"Create Codable enums with internal tag"},{"anchor":"Create-Codable-enums-with-adjacent-tag","stepsSection":[{"type":"step","code":null,"media":"Command-11.png","content":[{"inlineContent":[{"type":"text","text":"Identify all the variations by the tags representing variations and the fields for the tag and content value."}],"type":"paragraph"}],"runtimePreview":null,"caption":[]},{"type":"step","runtimePreview":"Command-11.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"codeVoice","code":"enum"},{"type":"text","text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section."}]}],"media":null,"code":"Command-02.swift"},{"code":"Command-08.swift","runtimePreview":"Command-11.png","type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro to "},{"type":"codeVoice","code":"enum"},{"text":" type definition with value specifying tag field name, similar to previous section.","type":"text"}]}]},{"code":"Command-11.swift","type":"step","caption":[],"runtimePreview":"Command-11.png","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","type":"reference","isActive":true},{"text":" macro to ","type":"text"},{"code":"enum","type":"codeVoice"},{"type":"text","text":" type definition with value specifying content field name."}]}]},{"type":"step","content":[{"inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"text":" macro to ignore decoding and encoding initialized associated values per case while allowing them in other cases.","type":"text"}],"type":"paragraph"}],"caption":[],"media":null,"runtimePreview":"Command-12.png","code":"Command-12.swift"}],"title":"Create Codable enums with adjacent tag","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"In this case the tag and content are adjacent to each other as two fields in each variation."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The tag and content fields are common across all the variations. "},{"code":"MetaCodable","type":"codeVoice"},{"text":" supports any type of value for tag default being ","type":"text"},{"type":"codeVoice","code":"String"},{"type":"text","text":"."}],"type":"paragraph"}],"mediaPosition":"trailing"}]}]},{"action":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","overridingTitle":"Get started","overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"type":"reference","isActive":true},"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"title":"Add common decoding\/encoding customizations","kind":"callToAction","featuredEyebrow":"Tutorial"}],"metadata":{"category":"Discover MetaCodable","title":"Represent variations in data","role":"project","categoryPathComponent":"Usage"},"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"},"references":{"Command-08.png":{"type":"image","identifier":"Command-08.png","alt":"Command variations JSON representation","variants":[{"url":"\/images\/MetaCodable\/Command-08.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Command-08~dark.png"}]},"Command-07.png":{"type":"image","identifier":"Command-07.png","alt":"Command variations JSON representation","variants":[{"url":"\/images\/MetaCodable\/Command-07.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Command-07~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","kind":"symbol","url":"\/documentation\/metacodable\/codedas()","title":"CodedAs()","type":"topic","abstract":[{"type":"text","text":"Provides the identifier actual type for internally\/adjacently tagged enums"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}],"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">()","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}],"url":"\/documentation\/metacodable\/ignoredecoding()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreDecoding"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","title":"IgnoreDecoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the attached type\/enum-case will be ignored for decoding\/encoding."}],"url":"\/documentation\/metacodable\/ignorecodinginitialized()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"IgnoreCodingInitialized","kind":"identifier"},{"kind":"text","text":"()"}],"role":"symbol","kind":"symbol","title":"IgnoreCodingInitialized()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},"Command-11.png":{"type":"image","identifier":"Command-11.png","alt":"Command variations JSON representation","variants":[{"url":"\/images\/MetaCodable\/Command-11.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Command-11~dark.png"}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","title":"Create Codable type and customize CodingKey of fields","abstract":[{"type":"text","text":"This tutorial guides you through"}],"kind":"section","type":"section"},"doc://MetaCodable/tutorials/Usage":{"type":"topic","url":"\/tutorials\/usage","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","abstract":[{"type":"codeVoice","code":"MetaCodable"},{"text":" supercharges ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"’s "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations and create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"kind":"overview","title":"Discover MetaCodable","role":"overview"},"Command-10.swift":{"fileName":"Command.swift","highlights":[{"line":7},{"line":9}],"fileType":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    @CodedAs(0)","    case load(key: String)","    @CodedAs(1)","    case store(key: String, value: Int)","}"],"syntax":"swift","identifier":"Command-10.swift","type":"file"},"Command-07.swift":{"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    case execute(filePath: String)","    @CodingKeys(.snake_case)","    case send(localData: String)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"highlights":[{"line":8},{"line":9},{"line":10}],"fileName":"Command.swift","syntax":"swift","fileType":"swift","identifier":"Command-07.swift","type":"file"},"Command-05.swift":{"fileName":"Command.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"fileType":"swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"syntax":"swift","identifier":"Command-05.swift","type":"file"},"Command-09.swift":{"type":"file","syntax":"swift","fileName":"Command.swift","fileType":"swift","identifier":"Command-09.swift","highlights":[{"line":5}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","title":"Represent variations in data","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"role":"project","type":"topic","url":"\/tutorials\/metacodable\/enum","kind":"project"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"url":"\/tutorials\/usage\/advanced-metacodable","role":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","title":"Advanced MetaCodable","type":"topic","kind":"article","abstract":[]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"abstract":[{"type":"text","text":"This tutorial guides you through"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"section","title":"Share common Codable fields","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"type":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","kind":"section","role":"pseudoSymbol","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"section","title":"Decode\/Encode date representations","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","kind":"project","url":"\/tutorials\/metacodable\/dynamic","title":"Represent dynamic data variations with protocol","estimatedTime":"20min","type":"topic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"role":"project"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"abstract":[{"type":"text","text":"Indicates "},{"type":"codeVoice","code":"CodingKey"},{"text":" for the field names\/associated value label will be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the provided case format."}],"url":"\/documentation\/metacodable\/codingkeys(_:)","role":"symbol","title":"CodingKeys(_:)","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodingKeys"},{"kind":"text","text":"("},{"text":"CodingKeyNameStrategy","kind":"typeIdentifier","preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO"},{"text":")","kind":"text"}],"type":"topic"},"Command-04.swift":{"fileName":"Command.swift","highlights":[{"line":5},{"line":6}],"fileType":"swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(key: String, value: Int)","}"],"syntax":"swift","identifier":"Command-04.swift","type":"file"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"text":" using ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"kind":"section","type":"section"},"Xcode 15 or later":{"title":"Xcode 15 or later","type":"xcodeRequirement","identifier":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","kind":"symbol","url":"\/documentation\/metacodable\/contentat(_:_:)","title":"ContentAt(_:_:)","type":"topic","abstract":[{"text":"Indicates the enum-case associated values or protocol conforming types need","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to be decoded\/encoded at the "},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"ContentAt","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":"...)"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"kind":"section","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","type":"section","title":"Create custom advanced customizations","url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","role":"pseudoSymbol","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"type":"topic","kind":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"kind":"identifier","text":"CodedAt"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":"...)"}],"title":"CodedAt(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}]},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"kind":"project","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","type":"topic","title":"Use with general-purpose Swift types","url":"\/tutorials\/metacodable\/essential","role":"project","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies":{"type":"topic","url":"\/tutorials\/metacodable\/commonstrategies","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","abstract":[{"text":"Learn how to apply strategies like ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}],"estimatedTime":"10min","kind":"project","title":"Using Common Strategies","role":"project"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"title":"Create Codable enums with adjacent tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","role":"pseudoSymbol","type":"section","kind":"section"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Available-Common-Strategies":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/commonstrategies#Available-Common-Strategies","title":"Available Common Strategies","abstract":[{"text":"Learn how to apply strategies like ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}],"kind":"section","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","role":"pseudoSymbol","url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"kind":"section","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"kind":"project","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","type":"topic","title":"Add common decoding\/encoding customizations","url":"\/tutorials\/metacodable\/helper","role":"project","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}]},"Command-12.png":{"identifier":"Command-12.png","alt":"Command variations JSON representation","variants":[{"url":"\/images\/MetaCodable\/Command-12.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Command-12~dark.png"}],"type":"image"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"abstract":[{"text":"This tutorial guides you through","type":"text"}],"title":"Customize field decoding\/encoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"section","title":"Create dynamic variation Codable types","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types"},"Command-12.swift":{"identifier":"Command-12.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","    case ignore(count: Int = 1)","    @IgnoreCodingInitialized","    case dumpToDisk(info: Int = 0)","}"],"type":"file","fileName":"Command.swift","syntax":"swift","highlights":[{"line":9},{"line":10},{"line":11}],"fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Check-Your-Understanding":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"text":"Check Your Understanding","type":"text"}],"url":"\/tutorials\/metacodable\/commonstrategies#Check-Your-Understanding","type":"link"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"topic","url":"\/documentation\/metacodable\/ignorecoding()","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCoding"},{"kind":"text","text":"()"}],"role":"symbol","title":"IgnoreCoding()"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","kind":"symbol","url":"\/documentation\/metacodable\/codedas(_:_:)","title":"CodedAs(_:_:)","type":"topic","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"text":" ","type":"text"},{"type":"text","text":"additional variable "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":"s."}],"role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":"...)","kind":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Applying-Common-Strategies":{"type":"section","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"type":"codeVoice","code":"ValueCoder"},{"text":" to all properties automatically.","type":"text"}],"kind":"section","url":"\/tutorials\/metacodable\/commonstrategies#Applying-Common-Strategies","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies","title":"Applying Common Strategies","role":"pseudoSymbol"},"Command-01.swift":{"fileType":"swift","identifier":"Command-01.swift","highlights":[],"content":["import MetaCodable","","@Codable","enum Command {","    case load","    case store","}"],"type":"file","fileName":"Command.swift","syntax":"swift"},"Command-02.swift":{"content":["import MetaCodable","","@Codable","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"fileType":"swift","highlights":[],"fileName":"Command.swift","identifier":"Command-02.swift","syntax":"swift","type":"file"},"Command-01.png":{"type":"image","alt":"Command variations JSON representation","variants":[{"traits":["1x","light"],"url":"\/images\/MetaCodable\/Command-01.png"},{"url":"\/images\/MetaCodable\/Command-01~dark.png","traits":["1x","dark"]}],"identifier":"Command-01.png"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"abstract":[{"type":"text","text":"Indicates the field\/case\/type needs to ignored from encoding."}],"url":"\/documentation\/metacodable\/ignoreencoding()","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"role":"symbol","kind":"symbol","title":"IgnoreEncoding()","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},"Command-06.swift":{"type":"file","fileName":"Command.swift","fileType":"swift","syntax":"swift","highlights":[{"line":8},{"line":9}],"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"identifier":"Command-06.swift"},"Command-08.swift":{"fileType":"swift","identifier":"Command-08.swift","highlights":[{"line":4}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"fileName":"Command.swift","syntax":"swift","type":"file"},"Command-11.swift":{"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"fileType":"swift","identifier":"Command-11.swift","syntax":"swift","fileName":"Command.swift","type":"file","highlights":[{"line":5}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"title":"Create Codable enums with external tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","abstract":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","role":"pseudoSymbol","type":"section","kind":"section"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"url":"\/tutorials\/usage\/metacodable-essentials","abstract":[],"title":"MetaCodable essentials","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","role":"article","type":"topic","kind":"article"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"text":" module.","type":"text"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"section","title":"Decode\/Encode sequence of values","role":"pseudoSymbol","type":"section","url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values"},"Command-03.swift":{"type":"file","fileName":"Command.swift","fileType":"swift","syntax":"swift","highlights":[{"line":5}],"content":["import MetaCodable","","@Codable","enum Command {","    case load(_ key: String)","    case store(key: String, value: Int)","}"],"identifier":"Command-03.swift"}}}