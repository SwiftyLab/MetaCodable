{"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax"]]},"identifier":{"url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax\/init(literal:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"text":"literal","kind":"externalParam"},{"kind":"text","text":": "},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ExpressibleByLiteralSyntax","kind":"typeIdentifier","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax","preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P"},{"kind":"text","text":")"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"syntax":null,"code":["let arrayExpr = Expr(literal: [\"a\", \"b\", \"c\"])","\/\/ `arrayExpr` is a syntax tree like `[\"a\", \"b\", \"c\"]`"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This initializer is compatible with types that conform to"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax","isActive":true},{"type":"text","text":". These include:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":" and "},{"code":"Substring","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Int","type":"codeVoice"},{"type":"text","text":" and other integer types"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Double","type":"codeVoice"},{"text":" and other floating-point types","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Bool"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Array"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" of conforming elements"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Dictionary"},{"text":" and ","type":"text"},{"code":"KeyValuePairs","type":"codeVoice"},{"type":"text","text":" of conforming keys and values"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Optional","type":"codeVoice"},{"type":"text","text":" of conforming wrapped value"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Conformances will generally handle edge cases sensibly: "},{"type":"codeVoice","code":"String"},{"type":"text","text":" will"},{"type":"text","text":" "},{"type":"text","text":"use raw literals and escapes as needed, "},{"code":"Optional","type":"codeVoice"},{"type":"text","text":" will wrap a nested"},{"type":"text","text":" "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" in "},{"code":".some","type":"codeVoice"},{"type":"text","text":", "},{"code":"Double","type":"codeVoice"},{"text":" will represent special values like infinities","type":"text"},{"type":"text","text":" "},{"text":"as code sequences like ","type":"text"},{"code":".infinity","type":"codeVoice"},{"type":"text","text":", etc. "},{"code":"Set","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" sort","type":"text"},{"type":"text","text":" "},{"text":"their elements to improve stability.","type":"text"}]},{"inlineContent":[{"text":"Because of that intelligent behavior, this initializer is not guaranteed","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to produce a literal as the outermost syntax node, or even to have a"},{"text":" ","type":"text"},{"text":"literal anywhere in its syntax tree. Use a convenience initializer on a","type":"text"},{"text":" ","type":"text"},{"text":"specific type if you need that exact type in the syntax tree.","type":"text"}],"type":"paragraph"}]}],"sections":[],"metadata":{"externalID":"s:11SwiftSyntax04ExprB0V0aB7BuilderE7literalACx_tcAD020ExpressibleByLiteralB0Rzlufc","extendedModule":"SwiftSyntax","roleHeading":"Initializer","title":"init(literal:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"literal"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P","text":"ExpressibleByLiteralSyntax","kind":"typeIdentifier"},{"text":")","kind":"text"}],"role":"symbol","modules":[{"relatedModules":["SwiftSyntax"],"name":"SwiftSyntaxBuilder"}],"symbolKind":"init"},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"type":"text","text":"Returns a syntax tree for an expression that represents the value of the"},{"type":"text","text":" "},{"type":"text","text":"provided instance. For example, passing an "},{"type":"codeVoice","code":"Array<String>"},{"text":" will result in","type":"text"},{"text":" ","type":"text"},{"text":"an array literal containing string literals:","type":"text"}],"variants":[{"paths":["\/documentation\/swiftsyntaxbuilder\/swiftsyntax\/exprsyntax\/init(literal:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/SwiftSyntax":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax","type":"topic","url":"\/documentation\/swiftsyntaxbuilder\/swiftsyntax","abstract":[],"title":"SwiftSyntax","role":"collection","kind":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder":{"role":"collection","url":"\/documentation\/swiftsyntaxbuilder","type":"topic","kind":"symbol","abstract":[],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder","title":"SwiftSyntaxBuilder"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/ExpressibleByLiteralSyntax":{"type":"topic","kind":"symbol","title":"ExpressibleByLiteralSyntax","abstract":[{"type":"text","text":"A Swift type whose value can be represented directly in source code by a"},{"type":"text","text":" "},{"type":"text","text":"Swift literal."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ExpressibleByLiteralSyntax"}],"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/ExpressibleByLiteralSyntax","url":"\/documentation\/swiftsyntaxbuilder\/expressiblebyliteralsyntax","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ExpressibleByLiteralSyntax"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/SwiftSyntax/ExprSyntax":{"fragments":[{"text":"extension","kind":"keyword"},{"kind":"text","text":" "},{"text":"ExprSyntax","kind":"identifier","preciseIdentifier":"s:11SwiftSyntax04ExprB0V"}],"navigatorTitle":[{"kind":"identifier","text":"ExprSyntax"}],"kind":"symbol","url":"\/documentation\/swiftsyntaxbuilder\/swiftsyntax\/exprsyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax","title":"ExprSyntax","role":"symbol","abstract":[],"type":"topic"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntaxBuilder/SwiftSyntax/ExprSyntax/init(literal:)":{"fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"literal","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"text":"ExpressibleByLiteralSyntax","kind":"typeIdentifier","preciseIdentifier":"s:18SwiftSyntaxBuilder020ExpressibleByLiteralB0P"},{"text":")","kind":"text"}],"kind":"symbol","url":"\/documentation\/swiftsyntaxbuilder\/swiftsyntax\/exprsyntax\/init(literal:)","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntaxBuilder\/SwiftSyntax\/ExprSyntax\/init(literal:)","title":"init(literal:)","role":"symbol","abstract":[{"text":"Returns a syntax tree for an expression that represents the value of the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"provided instance. For example, passing an "},{"code":"Array<String>","type":"codeVoice"},{"text":" will result in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"an array literal containing string literals:"}],"type":"topic"}}}