{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/documentation\/MetaCodable"]]},"primaryContentSections":[{"declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@attached","kind":"attribute"},{"kind":"text","text":"(peer) "},{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"<each ","kind":"text"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"if"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"condition"},{"text":": (repeat each ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":")"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"condition","content":[{"type":"paragraph","inlineContent":[{"text":"The condition to be checked.","type":"text"}]}]}]},{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"This macro can be applied to variables to ignore them from encoding.","type":"text"}]},{"syntax":"swift","code":["@IgnoreEncoding(if: \\String.isEmpty)","let field: String"],"type":"codeListing"},{"inlineContent":[{"text":"The decoding data needs to have applicable data in ","type":"text"},{"type":"codeVoice","code":"field"},{"text":" key.","type":"text"},{"text":" ","type":"text"},{"text":"But the encoded data might not have any ","type":"text"},{"code":"field","type":"codeVoice"},{"type":"text","text":" key for specific values"},{"text":" ","type":"text"},{"type":"text","text":"if the condition for those values return "},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Similarly, for enums this macro can be applied to cases","type":"text"},{"type":"text","text":" "},{"text":"to ignore them from encoding.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func fieldEncodable(_ str: String) {","    return !str.isEmpty","}","","@IgnoreEncoding(if: fieldEncodable)","case field(String)"]},{"type":"paragraph","inlineContent":[{"text":"This case will never be encoded if associated ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" data is empty.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"But "},{"type":"codeVoice","code":"field"},{"text":" case will be decoded if case related data is present.","type":"text"}]},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"type":"text","text":"This macro on its own only validates if attached declaration"},{"text":" ","type":"text"},{"text":"is a variable declaration. ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)"},{"type":"text","text":" macro uses this macro"},{"type":"text","text":" "},{"text":"when generating final implementations.","type":"text"}],"type":"paragraph"}]},{"name":"Important","content":[{"inlineContent":[{"type":"text","text":"The condition argument types must confirm to "},{"type":"codeVoice","code":"Codable"},{"text":" ","type":"text"},{"text":"and the single argument should match attached type when attached to field.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When attached to cases the arguments count, order and types should match"},{"type":"text","text":" "},{"text":"attached enum-case associated variables.","type":"text"}],"type":"paragraph"}],"style":"important","type":"aside"}],"kind":"content"}],"kind":"symbol","sections":[],"variants":[{"paths":["\/documentation\/metacodable\/ignoreencoding(if:)-1iuvv"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"anchor":"Ignoring","generated":true,"identifiers":["doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(basedOn:)","doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"],"title":"Ignoring"}],"abstract":[{"text":"Indicates the field\/case needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is not satisfied."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"externalID":"s:11MetaCodable14IgnoreEncoding2ifySbxxQpXE_tcRvzlufm","role":"symbol","symbolKind":"macro","platforms":[{"introducedAt":"5.9","unavailable":false,"deprecated":false,"beta":false,"name":"Swift"}],"fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"<each "},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"if","kind":"externalParam"},{"text":": (repeat each ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"title":"IgnoreEncoding(if:)","roleHeading":"Macro","modules":[{"name":"MetaCodable"}]},"references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(basedOn:)":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(basedOn:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreEncoding"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"basedOn"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"kind":"symbol","title":"IgnoreEncoding(basedOn:)","url":"\/documentation\/metacodable\/ignoreencoding(basedon:)","type":"topic","abstract":[{"text":"Indicates the field needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"text":"is not satisfied, based on the containing object.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-1iuvv":{"type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-1iuvv","url":"\/documentation\/metacodable\/ignoreencoding(if:)-1iuvv","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"kind":"text","text":"<each "},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"if","kind":"externalParam"},{"kind":"text","text":": (repeat each "},{"text":"T","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Indicates the field\/case needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"text":"is not satisfied.","type":"text"}],"title":"IgnoreEncoding(if:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"title":"IgnoreEncoding()"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"text":"()","kind":"text"}],"kind":"symbol","title":"IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","type":"topic","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"type":"text","text":" "},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable":{"abstract":[{"text":"Supercharge ","type":"text"},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"type":"codeVoice","code":"Codable"},{"text":" implementations with macros.","type":"text"}],"url":"\/documentation\/metacodable","role":"collection","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable","type":"topic","title":"MetaCodable","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding(if:)-7toka":{"type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding(if:)-7toka","url":"\/documentation\/metacodable\/ignoreencoding(if:)-7toka","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"if"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"text":")","kind":"text"}],"abstract":[{"text":"Indicates the field needs to be encoded only if provided condition","type":"text"},{"type":"text","text":" "},{"text":"is not satisfied.","type":"text"}],"title":"IgnoreEncoding(if:)"},"doc://MetaCodable/documentation/MetaCodable/Codable(commonStrategies:)":{"title":"Codable(commonStrategies:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Codable","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"commonStrategies"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","text":"CodableCommonStrategy","preciseIdentifier":"s:11MetaCodable0B14CommonStrategyV"},{"text":"])","kind":"text"}],"abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"class"},{"type":"text","text":", "},{"code":"enum","type":"codeVoice"},{"type":"text","text":", "},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"type":"text","text":" "},{"text":"declarations.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","role":"symbol","url":"\/documentation\/metacodable\/codable(commonstrategies:)"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"kind":"symbol","title":"IgnoreDecoding()","url":"\/documentation\/metacodable\/ignoredecoding()","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}]}}}