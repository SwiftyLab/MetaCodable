{"metadata":{"externalID":"s:14ArgumentParser4FlagVA2A010EnumerableC0RzlE12wrappedValue11exclusivity4helpACyxGx_AA0C11ExclusivityVAA0A4HelpVSgtcfc","modules":[{"name":"ArgumentParser"}],"extendedModule":"ArgumentParser","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"code":"EnumerableFlag","type":"codeVoice"},{"text":".","type":"text"}]},"symbolKind":"init","roleHeading":"Initializer","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"wrappedValue","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","preciseIdentifier":"s:14ArgumentParser4FlagVA2A010EnumerableC0RzlE5Valuexmfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"exclusivity","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","text":"FlagExclusivity"},{"kind":"text","text":", "},{"kind":"externalParam","text":"help"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A4HelpV","text":"ArgumentHelp"},{"kind":"text","text":"?)"}],"title":"init(wrappedValue:exclusivity:help:)","role":"symbol"},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"init","kind":"keyword"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"wrappedValue"},{"text":": ","kind":"text"},{"text":"Value","preciseIdentifier":"s:14ArgumentParser4FlagVA2A010EnumerableC0RzlE5Valuexmfp","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"exclusivity","kind":"externalParam"},{"kind":"text","text":": "},{"text":"FlagExclusivity","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/FlagExclusivity","kind":"typeIdentifier"},{"kind":"text","text":" = .exclusive, "},{"kind":"externalParam","text":"help"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentHelp","text":"ArgumentHelp","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser0A4HelpV"},{"text":"? = nil)","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"parameters":[{"name":"wrappedValue","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A default value to use for this property, provided implicitly by the compiler during property wrapper initialization."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The behavior to use when multiple flags are specified."}]}],"name":"exclusivity"},{"name":"help","content":[{"inlineContent":[{"text":"Information about how to use this flag.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"text":"Use this initializer to customize the name and number of states further than using a ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"To use, define an ","type":"text"},{"code":"EnumerableFlag","type":"codeVoice"},{"text":" enumeration with a case for each state, and use that as the type for your flag.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"In this case, the user can specify either "},{"code":"--use-production-server","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"--use-development-server"},{"type":"text","text":" to set the flagâ€™s value."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum ServerChoice: EnumerableFlag {","  case useProductionServer","  case useDevelopmentServer","}","","@Flag var serverChoice: ServerChoice = .useProductionServer"]}]}],"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/Flag"]]},"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:exclusivity:help:)"},"abstract":[{"type":"text","text":"Creates a property with a default value provided by standard Swift default value syntax that gets its value from the presence of a flag."}],"variants":[{"paths":["\/documentation\/argumentparser\/flag\/init(wrappedvalue:exclusivity:help:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"sections":[],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/FlagExclusivity":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FlagExclusivity","kind":"identifier"}],"url":"\/documentation\/argumentparser\/flagexclusivity","abstract":[{"text":"The options for treating enumeration-based flags as exclusive.","type":"text"}],"navigatorTitle":[{"text":"FlagExclusivity","kind":"identifier"}],"kind":"symbol","role":"symbol","title":"FlagExclusivity","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/FlagExclusivity","type":"topic"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/ArgumentHelp":{"type":"topic","abstract":[{"text":"Help information for a command-line argument.","type":"text"}],"title":"ArgumentHelp","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"ArgumentHelp","kind":"identifier"}],"url":"\/documentation\/argumentparser\/argumenthelp","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/ArgumentHelp","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ArgumentHelp","kind":"identifier"}]},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/Flag/init(wrappedValue:exclusivity:help:)":{"role":"symbol","kind":"symbol","type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"wrappedValue","kind":"externalParam"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser4FlagVA2A010EnumerableC0RzlE5Valuexmfp"},{"kind":"text","text":", "},{"kind":"externalParam","text":"exclusivity"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:14ArgumentParser15FlagExclusivityV","text":"FlagExclusivity"},{"kind":"text","text":", "},{"text":"help","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:14ArgumentParser0A4HelpV","text":"ArgumentHelp","kind":"typeIdentifier"},{"text":"?)","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"EnumerableFlag"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/Flag\/init(wrappedValue:exclusivity:help:)","url":"\/documentation\/argumentparser\/flag\/init(wrappedvalue:exclusivity:help:)","abstract":[{"type":"text","text":"Creates a property with a default value provided by standard Swift default value syntax that gets its value from the presence of a flag."}],"title":"init(wrappedValue:exclusivity:help:)"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser/Flag":{"url":"\/documentation\/argumentparser\/flag","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Flag","kind":"identifier"}],"type":"topic","title":"Flag","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser\/Flag","kind":"symbol","abstract":[{"type":"text","text":"A property wrapper that represents a command-line flag."}],"navigatorTitle":[{"text":"Flag","kind":"identifier"}],"role":"symbol"},"doc://com.SwiftyLab.HelperCoders/documentation/ArgumentParser":{"kind":"symbol","role":"collection","url":"\/documentation\/argumentparser","abstract":[],"title":"ArgumentParser","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/ArgumentParser","type":"topic"}}}