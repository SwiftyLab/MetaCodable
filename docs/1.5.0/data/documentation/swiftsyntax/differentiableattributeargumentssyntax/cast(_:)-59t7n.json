{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DifferentiableAttributeArgumentsSyntax\/cast(_:)-59t7n"},"abstract":[{"text":"Force-casts the current syntax node to its own type.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax","doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DifferentiableAttributeArgumentsSyntax"]]},"sections":[],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This cast will always succeed"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cast","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"syntaxType"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":".Type) -> "},{"text":"Self","kind":"typeIdentifier"}]}]},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The current syntax node."}]}],"kind":"content"},{"content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"content":[{"inlineContent":[{"type":"text","text":"This method overloads the general "},{"code":"cast","type":"codeVoice"},{"type":"text","text":" method and is marked as deprecated to produce a warning,"},{"text":" ","type":"text"},{"type":"text","text":"informing the user that the cast will always succeed."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"}],"kind":"content"}],"metadata":{"title":"cast(_:)","modules":[{"name":"SwiftSyntax"}],"extendedModule":"SwiftSyntax","platforms":[{"deprecated":true,"message":"This cast will always succeed","beta":false,"unavailable":false}],"roleHeading":"Instance Method","role":"symbol","externalID":"s:11SwiftSyntax0B8ProtocolPAAE4castyxxmF::SYNTHESIZED::s:11SwiftSyntax032DifferentiableAttributeArgumentsB0V","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cast","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".Type) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}]},"variants":[{"paths":["\/documentation\/swiftsyntax\/differentiableattributeargumentssyntax\/cast(_:)-59t7n"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/DifferentiableAttributeArgumentsSyntax/cast(_:)-59t7n":{"identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DifferentiableAttributeArgumentsSyntax\/cast(_:)-59t7n","abstract":[{"type":"text","text":"Force-casts the current syntax node to its own type."}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/swiftsyntax\/differentiableattributeargumentssyntax\/cast(_:)-59t7n","deprecated":true,"title":"cast(_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"cast","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"Self"}]},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax":{"url":"\/documentation\/swiftsyntax","type":"topic","abstract":[],"role":"collection","title":"SwiftSyntax","kind":"symbol","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax"},"doc://com.SwiftyLab.HelperCoders/documentation/SwiftSyntax/DifferentiableAttributeArgumentsSyntax":{"url":"\/documentation\/swiftsyntax\/differentiableattributeargumentssyntax","identifier":"doc:\/\/com.SwiftyLab.HelperCoders\/documentation\/SwiftSyntax\/DifferentiableAttributeArgumentsSyntax","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DifferentiableAttributeArgumentsSyntax","kind":"identifier"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"DifferentiableAttributeArgumentsSyntax"}],"type":"topic","title":"DifferentiableAttributeArgumentsSyntax","abstract":[{"type":"text","text":"The arguments for the "},{"type":"codeVoice","code":"@differentiable"},{"type":"text","text":" attribute: an optional differentiability kind, an optional differentiability parameter clause, and an optional ‘where’ clause."}]}}}