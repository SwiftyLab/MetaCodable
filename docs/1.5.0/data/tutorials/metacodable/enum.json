{"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"categoryPathComponent":"Usage","title":"Represent variations in data","role":"project","category":"Discover MetaCodable"},"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage","modules":[{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","kind":"task"},{"kind":"assessment","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding"}]},{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}]},"kind":"project","identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","interfaceLanguage":"swift"},"variants":[{"paths":["\/tutorials\/metacodable\/enum"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[{"xcodeRequirement":"Xcode 15 or later","content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in ","type":"text"},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"text":".","type":"text"}]}],"kind":"hero","title":"Represent variations in data","chapter":"MetaCodable essentials","estimatedTimeInMinutes":10},{"kind":"tasks","tasks":[{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"This is default representation of ","type":"text"},{"type":"codeVoice","code":"enum"},{"type":"text","text":" in "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":", where variation can be identified with the value of the key."}]},{"inlineContent":[{"text":"Since the data is keyed by the tag, variation is known before the content is being parsed.","type":"text"}],"type":"paragraph"}]}],"stepsSection":[{"type":"step","media":"Command-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify all the variations and the tags representing variations."}]}],"code":null,"caption":[],"runtimePreview":null},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" with each case representing each variation, with case name synonymous to tag value."}]}],"type":"step","media":null,"code":"Command-01.swift","runtimePreview":"Command-01.png"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Add variation data to each case as associated values with label representing field name and value type as field type.","type":"text"}]}],"type":"step","media":null,"runtimePreview":"Command-01.png","caption":[],"code":"Command-02.swift"},{"type":"step","caption":[],"code":"Command-03.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Secondary label can be used as field name as well, to allow not specifying explicit label when creating case value.","type":"text"}]}],"runtimePreview":"Command-01.png","media":null},{"caption":[],"media":null,"code":"Command-04.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Variation tag values can be declared explicitly by attaching "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference","isActive":true},{"text":" macro to the case.","type":"text"}]}],"runtimePreview":"Command-01.png","type":"step"},{"media":null,"type":"step","code":"Command-05.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In case of multiple variation data fields, variation specific "},{"code":"struct","type":"codeVoice"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"class"},{"text":" type can be created, and created type can be added to enum-case as associated value without any label.","type":"text"}]}],"runtimePreview":"Command-01.png","caption":[]},{"code":"Command-06.swift","type":"step","caption":[],"runtimePreview":"Command-01.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore specific case from decoding or encoding or both by attaching "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true},{"type":"text","text":" or "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true},{"text":" macros respectively.","type":"text"}]}],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)"},{"type":"text","text":" macro to specify "},{"code":"CodingKey","type":"codeVoice"},{"text":" case style per case while using different case style for associated value label.","type":"text"}]}],"code":"Command-07.swift","media":null,"type":"step","runtimePreview":"Command-07.png","caption":[]}],"title":"Create Codable enums with external tag","anchor":"Create-Codable-enums-with-external-tag"},{"anchor":"Create-Codable-enums-with-internal-tag","title":"Create Codable enums with internal tag","contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In this case the tag value identifying variant is inside the content, next to any other fields."}]},{"type":"paragraph","inlineContent":[{"text":"The tag value is present at a specific field common across all the variations. ","type":"text"},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supports any type of value for tag default being "},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}]}],"kind":"contentAndMedia"}],"stepsSection":[{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Identify all the variations by the tags representing variations and the field for the tag value."}],"type":"paragraph"}],"media":"Command-08.png","type":"step","code":null,"runtimePreview":null},{"media":null,"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" ","type":"text"},{"type":"codeVoice","code":"enum"},{"type":"text","text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section."}],"type":"paragraph"}],"code":"Command-02.swift","runtimePreview":"Command-08.png","type":"step","caption":[]},{"code":"Command-08.swift","runtimePreview":"Command-08.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":" macro to ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" type definition with value specifying tag field name.","type":"text"}]}],"type":"step","media":null},{"caption":[],"type":"step","runtimePreview":"Command-08.png","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If tag value type differs from "},{"code":"String","type":"codeVoice"},{"type":"text","text":" type, specify explicitly with "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()"},{"text":" macro attached to ","type":"text"},{"code":"enum","type":"codeVoice"},{"type":"text","text":" type definition."}]}],"code":"Command-09.swift"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If tag values differ from case name, specify explicitly with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","type":"reference","isActive":true},{"text":" macro attached to the case.","type":"text"}]}],"runtimePreview":"Command-08.png","media":null,"code":"Command-10.swift","type":"step","caption":[]}]},{"anchor":"Create-Codable-enums-with-adjacent-tag","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"text":"In this case the tag and content are adjacent to each other as two fields in each variation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The tag and content fields are common across all the variations. "},{"type":"codeVoice","code":"MetaCodable"},{"text":" supports any type of value for tag default being ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}],"title":"Create Codable enums with adjacent tag","stepsSection":[{"caption":[],"code":null,"runtimePreview":null,"type":"step","content":[{"inlineContent":[{"type":"text","text":"Identify all the variations by the tags representing variations and the fields for the tag and content value."}],"type":"paragraph"}],"media":"Command-11.png"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" "},{"type":"codeVoice","code":"enum"},{"text":" with each case name synonymous to tag value, and associated values with label and type representing field name and type respectively, similar to first section.","type":"text"}]}],"caption":[],"type":"step","code":"Command-02.swift","runtimePreview":"Command-11.png"},{"runtimePreview":"Command-11.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"type":"text","text":" macro to "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" type definition with value specifying tag field name, similar to previous section."}]}],"code":"Command-08.swift","media":null,"type":"step"},{"caption":[],"type":"step","code":"Command-11.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro to "},{"type":"codeVoice","code":"enum"},{"text":" type definition with value specifying content field name.","type":"text"}]}],"runtimePreview":"Command-11.png"},{"type":"step","code":"Command-12.swift","media":null,"runtimePreview":"Command-12.png","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()"},{"text":" macro to ignore decoding and encoding initialized associated values per case while allowing them in other cases.","type":"text"}]}],"caption":[]}]}]},{"action":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","overridingTitle":"Get started","isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"kind":"callToAction","featuredEyebrow":"Tutorial","abstract":[{"text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of ","type":"text"},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}],"title":"Add common decoding\/encoding customizations"}],"references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}]},"Command-10.swift":{"highlights":[{"line":7},{"line":9}],"identifier":"Command-10.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    @CodedAs(0)","    case load(key: String)","    @CodedAs(1)","    case store(key: String, value: Int)","}"],"syntax":"swift","fileName":"Command.swift","type":"file","fileType":"swift"},"Command-08.png":{"type":"image","alt":"Command variations JSON representation","identifier":"Command-08.png","variants":[{"url":"\/images\/MetaCodable\/Command-08.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Command-08~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"title":"Add common decoding\/encoding customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"project","url":"\/tutorials\/metacodable\/helper","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","estimatedTime":"20min","kind":"project","type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"section","type":"section","role":"pseudoSymbol","title":"Decode\/Encode sequence of values","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"url":"\/tutorials\/metacodable\/essential","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","title":"Use with general-purpose Swift types","type":"topic","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"project","role":"project"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codedas(_:_:)","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"type":"text","text":"additional variable "},{"type":"codeVoice","code":"CodingKey"},{"text":"s.","type":"text"}],"title":"CodedAs(_:_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","role":"symbol"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"section","type":"section","role":"pseudoSymbol","title":"Create dynamic variation Codable types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"url":"\/tutorials\/usage\/metacodable-essentials","role":"article","kind":"article","type":"topic","title":"MetaCodable essentials","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"section","type":"section","role":"pseudoSymbol","title":"Customize field decoding\/encoding","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","role":"pseudoSymbol","kind":"section","type":"section","title":"Create Codable enums with internal tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","role":"pseudoSymbol","title":"Decode\/Encode basic value types without type check","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"Command-11.swift":{"fileType":"swift","type":"file","identifier":"Command-11.swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"fileName":"Command.swift","highlights":[{"line":5}],"syntax":"swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"title":"IgnoreEncoding()"},"Command-07.swift":{"identifier":"Command-07.swift","highlights":[{"line":8},{"line":9},{"line":10}],"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    case execute(filePath: String)","    @CodingKeys(.snake_case)","    case send(localData: String)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"syntax":"swift","fileType":"swift","type":"file","fileName":"Command.swift"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Applying-Common-Strategies":{"url":"\/tutorials\/metacodable\/commonstrategies#Applying-Common-Strategies","role":"pseudoSymbol","kind":"section","type":"section","title":"Applying Common Strategies","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Available-Common-Strategies":{"url":"\/tutorials\/metacodable\/commonstrategies#Available-Common-Strategies","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","kind":"section","type":"section","role":"pseudoSymbol","title":"Available Common Strategies","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}]},"Command-05.swift":{"type":"file","fileType":"swift","syntax":"swift","identifier":"Command-05.swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"fileName":"Command.swift","highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}]},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies":{"url":"\/tutorials\/metacodable\/commonstrategies","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","title":"Using Common Strategies","type":"topic","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"code":"ValueCoder","type":"codeVoice"},{"text":" to all properties automatically.","type":"text"}],"kind":"project","role":"project"},"Command-01.swift":{"syntax":"swift","content":["import MetaCodable","","@Codable","enum Command {","    case load","    case store","}"],"highlights":[],"type":"file","identifier":"Command-01.swift","fileName":"Command.swift","fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"section","type":"section","role":"pseudoSymbol","title":"Share common Codable fields","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","type":"section","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","role":"pseudoSymbol"},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the provided case format."}],"title":"CodingKeys(_:)","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}]},"Command-01.png":{"type":"image","alt":"Command variations JSON representation","variants":[{"url":"\/images\/MetaCodable\/Command-01.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Command-01~dark.png","traits":["1x","dark"]}],"identifier":"Command-01.png"},"doc://MetaCodable/documentation/MetaCodable/CodedAs()":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs()","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codedas()","abstract":[{"text":"Provides the identifier actual type for internally\/adjacently tagged enums","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and protocols."}],"title":"CodedAs()","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">()","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"title":"CodedAt(_:)","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}]},"Command-07.png":{"variants":[{"url":"\/images\/MetaCodable\/Command-07.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Command-07~dark.png","traits":["1x","dark"]}],"type":"image","alt":"Command variations JSON representation","identifier":"Command-07.png"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through"}],"role":"pseudoSymbol","title":"Create Codable type and customize CodingKey of fields","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"title":"Represent variations in data","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"role":"project","url":"\/tutorials\/metacodable\/enum","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","estimatedTime":"10min","kind":"project","type":"topic"},"doc://MetaCodable/tutorials/Usage":{"title":"Discover MetaCodable","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"role":"overview","url":"\/tutorials\/usage","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","kind":"overview","type":"topic"},"Command-12.swift":{"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@ContentAt(\"content\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","    case ignore(count: Int = 1)","    @IgnoreCodingInitialized","    case dumpToDisk(info: Int = 0)","}"],"type":"file","syntax":"swift","fileName":"Command.swift","identifier":"Command-12.swift","highlights":[{"line":9},{"line":10},{"line":11}],"fileType":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol","title":"Decode\/Encode date representations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","type":"section"},"Command-09.swift":{"highlights":[{"line":5}],"identifier":"Command-09.swift","type":"file","fileType":"swift","content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","@CodedAs<Int>","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"fileName":"Command.swift","syntax":"swift"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"kind":"symbol","title":"IgnoreDecoding()","url":"\/documentation\/metacodable\/ignoredecoding()","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol","title":"Create custom advanced customizations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","type":"section"},"Command-02.swift":{"content":["import MetaCodable","","@Codable","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"highlights":[],"fileName":"Command.swift","identifier":"Command-02.swift","type":"file","syntax":"swift","fileType":"swift"},"doc://MetaCodable/documentation/MetaCodable/ContentAt(_:_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/ContentAt(_:_:)","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/contentat(_:_:)","abstract":[{"type":"text","text":"Indicates the enum-case associated values or protocol conforming types need"},{"type":"text","text":" "},{"type":"text","text":"to be decoded\/encoded at the "},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path provided."}],"title":"ContentAt(_:_:)","type":"topic","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ContentAt"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"text":"()","kind":"text"}],"kind":"symbol","title":"IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","type":"topic","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"type":"text","text":" "},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}]},"Command-06.swift":{"content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(StoredData)","    @IgnoreCoding","    case dumpToDisk","","    struct StoredData {","        let key: String","        let value: Int","    }","}"],"highlights":[{"line":8},{"line":9}],"syntax":"swift","identifier":"Command-06.swift","fileName":"Command.swift","fileType":"swift","type":"file"},"Command-04.swift":{"syntax":"swift","fileName":"Command.swift","content":["import MetaCodable","","@Codable","enum Command {","    @CodedAs(\"load\")","    case loads(_ key: String)","    case store(key: String, value: Int)","}"],"type":"file","fileType":"swift","identifier":"Command-04.swift","highlights":[{"line":5},{"line":6}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"role":"pseudoSymbol","title":"Create Codable enums with external tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Check-Your-Understanding":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding","title":"Check Your Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"type":"link","url":"\/tutorials\/metacodable\/commonstrategies#Check-Your-Understanding"},"Xcode 15 or later":{"identifier":"Xcode 15 or later","title":"Xcode 15 or later","type":"xcodeRequirement","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12"},"Command-08.swift":{"highlights":[{"line":4}],"content":["import MetaCodable","","@Codable","@CodedAt(\"type\")","enum Command {","    case load(key: String)","    case store(key: String, value: Int)","}"],"syntax":"swift","fileName":"Command.swift","type":"file","fileType":"swift","identifier":"Command-08.swift"},"Command-11.png":{"alt":"Command variations JSON representation","identifier":"Command-11.png","type":"image","variants":[{"url":"\/images\/MetaCodable\/Command-11.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Command-11~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"url":"\/tutorials\/metacodable\/dynamic","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","title":"Represent dynamic data variations with protocol","type":"topic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"project","role":"project"},"Command-12.png":{"alt":"Command variations JSON representation","identifier":"Command-12.png","type":"image","variants":[{"url":"\/images\/MetaCodable\/Command-12.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Command-12~dark.png","traits":["1x","dark"]}]},"Command-03.swift":{"syntax":"swift","identifier":"Command-03.swift","fileType":"swift","fileName":"Command.swift","highlights":[{"line":5}],"type":"file","content":["import MetaCodable","","@Codable","enum Command {","    case load(_ key: String)","    case store(key: String, value: Int)","}"]},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"type":"topic","title":"Advanced MetaCodable","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","url":"\/tutorials\/usage\/advanced-metacodable","abstract":[],"role":"article"}}}