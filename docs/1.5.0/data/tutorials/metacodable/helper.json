{"metadata":{"category":"Discover MetaCodable","title":"Add common decoding\/encoding customizations","categoryPathComponent":"Usage","role":"project"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/helper"]}],"hierarchy":{"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"]],"modules":[{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding","kind":"assessment"}]},{"sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage"},"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[{"estimatedTimeInMinutes":20,"title":"Add common decoding\/encoding customizations","kind":"hero","xcodeRequirement":"Xcode 15 or later","chapter":"Advanced MetaCodable","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"code":"HelperCoders","type":"codeVoice"},{"type":"text","text":" module."}]}]},{"kind":"tasks","tasks":[{"stepsSection":[{"media":"Product.png","caption":[],"runtimePreview":null,"type":"step","code":null,"content":[{"inlineContent":[{"type":"text","text":"Identify data with unpredictable type and can be mapped to an expected type."}],"type":"paragraph"}]},{"media":null,"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as expected type."}]}],"type":"step","code":"Product-01.swift","runtimePreview":"Product.png"},{"runtimePreview":"Product.png","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" on properties to indicate the type mapping transformation."}],"type":"paragraph"}],"type":"step","code":"Product-02.swift","media":null,"caption":[]}],"anchor":"DecodeEncode-basic-value-types-without-type-check","title":"Decode\/Encode basic value types without type check","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"In cases where data type is unpredictable, but the data can be converted to a specific type, this approach can be used to decode\/encode data.","type":"text"}]},{"inlineContent":[{"text":"i.e. if expected ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" type data is coming as ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", the data can be converted to expected type.","type":"text"}],"type":"paragraph"}]}]},{"title":"Decode\/Encode date representations","anchor":"DecodeEncode-date-representations","stepsSection":[{"runtimePreview":null,"content":[{"inlineContent":[{"text":"Identify date formats represented in data.","type":"text"}],"type":"paragraph"}],"type":"step","code":null,"media":"Date.png","caption":[]},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields as "},{"type":"codeVoice","code":"Date"},{"text":" type.","type":"text"}]}],"code":"Date-01.swift","caption":[],"runtimePreview":"Date.png","type":"step"},{"type":"step","runtimePreview":"Date.png","content":[{"inlineContent":[{"text":"Use ","type":"text"},{"code":"Since1970DateCoder","type":"codeVoice"},{"type":"text","text":" to decode\/encode UNIX timestamp."}],"type":"paragraph"}],"code":"Date-02.swift","caption":[],"media":null},{"runtimePreview":"Date.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"codeVoice","code":"ISO8601DateCoder"},{"text":" to decode\/encode date represented in ","type":"text"},{"type":"codeVoice","code":"ISO8601"},{"type":"text","text":" standard."}]}],"type":"step","media":null,"code":"Date-03.swift"},{"runtimePreview":"Date.png","content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"DateCoder","type":"codeVoice"},{"text":" to decode\/encode date represented in custom formats by providing the formatter.","type":"text"}]}],"caption":[],"media":null,"type":"step","code":"Date-04.swift"}],"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through decoding\/encoding ","type":"text"},{"code":"Date","type":"codeVoice"},{"type":"text","text":" type from various representation formats per property. i.e. UNIX timestamp, date represented in "},{"code":"ISO8601","type":"codeVoice"},{"type":"text","text":" like text formats."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]},{"contentSection":[{"content":[{"inlineContent":[{"type":"text","text":"This tutorial guides you through customizing decoding\/encoding of a sequence of values."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing"}],"stepsSection":[{"caption":[],"type":"step","media":"Data.png","content":[{"inlineContent":[{"type":"text","text":"Identify the type of sequence to be decoded. i.e. a sequence of base64 data."}],"type":"paragraph"}],"code":null,"runtimePreview":null},{"caption":[],"media":null,"type":"step","content":[{"inlineContent":[{"text":"Create ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type with the fields as the required sequence type."}],"type":"paragraph"}],"code":"Data-01.swift","runtimePreview":"Data.png"},{"caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"code":"SequenceCoder","type":"codeVoice"},{"type":"text","text":" and provide "},{"type":"codeVoice","code":"elementHelper"},{"text":" ","type":"text"},{"type":"codeVoice","code":"HelperCoder"},{"text":" to customize decoding\/encoding of each element.","type":"text"}]}],"code":"Data-02.swift","media":null,"runtimePreview":"Data.png"},{"runtimePreview":"Data.png","content":[{"inlineContent":[{"type":"text","text":"Provide "},{"type":"codeVoice","code":"lossy"},{"type":"text","text":" in "},{"type":"codeVoice","code":"configuration"},{"type":"text","text":" to ignore invalid element data instead of failing."}],"type":"paragraph"}],"media":null,"type":"step","caption":[],"code":"Data-03.swift"},{"type":"step","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide "},{"type":"codeVoice","code":"default"},{"text":" value in ","type":"text"},{"type":"codeVoice","code":"configuration"},{"text":" to be used in case provided data is not of sequence type or empty sequence data provided.","type":"text"}]}],"media":null,"code":"Data-04.swift","runtimePreview":"Data.png"}],"title":"Decode\/Encode sequence of values","anchor":"DecodeEncode-sequence-of-values"},{"anchor":"Create-custom-advanced-customizations","stepsSection":[{"type":"step","caption":[],"media":"User.png","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify data with different key in decoding and encoding."}]}],"code":null},{"code":"User-01.swift","runtimePreview":"User.png","media":null,"content":[{"inlineContent":[{"text":"Create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" type with the fields according to the data."}],"type":"paragraph"}],"type":"step","caption":[]},{"caption":[],"content":[{"inlineContent":[{"text":"Create custom ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"text":" type that accepts decoding and encoding key values.","type":"text"}],"type":"paragraph"}],"code":"User-02.swift","runtimePreview":"User.png","media":null,"type":"step"},{"runtimePreview":"User.png","media":null,"code":"User-03.swift","caption":[],"content":[{"inlineContent":[{"text":"Create custom ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":" type to be used for decoding\/encoding from provided string values.","type":"text"}],"type":"paragraph"}],"type":"step"},{"code":"User-04.swift","type":"step","runtimePreview":"User.png","caption":[],"media":null,"content":[{"inlineContent":[{"text":"Provide ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","isActive":true},{"type":"text","text":" implementations for "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)","isActive":true,"type":"reference"},{"text":" for decoding and encoding with provided key values.","type":"text"}],"type":"paragraph"}]},{"media":null,"runtimePreview":"User.png","code":"User-05.swift","caption":[],"type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the created custom "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","type":"reference","isActive":true},{"type":"text","text":" with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macro to use the decoding\/encoding customization."}]}]},{"type":"step","runtimePreview":"User.png","caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)"},{"text":" macro without any arguments, to the property to pass the type’s ","type":"text"},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" "},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" argument to the custom "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder"},{"type":"text","text":"."}]}],"media":null,"code":"User-06.swift"}],"title":"Create custom advanced customizations","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"This tutorial guides you through process of creating your own custom customizations for niche use cases that aren’t provided by this library.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In this section, we will try to support decoding\/encoding of a property that has different key name for decoding and encoding."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}]}]},{"title":"Represent dynamic data variations with protocol","featuredEyebrow":"Tutorial","kind":"callToAction","abstract":[{"text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol.","type":"text"}],"action":{"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"overridingTitle":"Get started","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","type":"reference"}}],"kind":"project","references":{"doc://MetaCodable/documentation/MetaCodable/HelperCoder":{"type":"topic","navigatorTitle":[{"text":"HelperCoder","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"HelperCoder","kind":"identifier"}],"title":"HelperCoder","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder","url":"\/documentation\/metacodable\/helpercoder","kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"A type that helps to decode and encode underlying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded"},{"type":"text","text":" type"},{"text":" ","type":"text"},{"text":"from provided ","type":"text"},{"type":"codeVoice","code":"decoder"},{"type":"text","text":" and to provided "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":" respectively."}]},"Data-02.swift":{"identifier":"Data-02.swift","syntax":"swift","fileName":"Data.swift","fileType":"swift","type":"file","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder()","        )","    )","    let messages: [Data]","}"],"highlights":[{"line":2},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"section","type":"section","role":"pseudoSymbol","title":"Share common Codable fields","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"Date.png":{"type":"image","variants":[{"url":"\/images\/MetaCodable\/Date.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Date~dark.png","traits":["1x","dark"]}],"identifier":"Date.png","alt":"Data with date formats varying for each property"},"Product-02.swift":{"identifier":"Product-02.swift","syntax":"swift","fileName":"Product.swift","fileType":"swift","type":"file","content":["import MetaCodable","","@Codable(commonStrategies: [.codedBy(.valueCoder())])","struct Product {","    let sku: Int","    let inStock: Bool","    let name: String","    let price: Double","}"],"highlights":[{"line":3}]},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/decode(from:)":{"abstract":[{"type":"text","text":"Decodes a value of the "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"text":" type from the given ","type":"text"},{"code":"decoder","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/metacodable\/helpercoder\/decode(from:)","required":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/decode(from:)","title":"decode(from:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"decode"},{"text":"(","kind":"text"},{"text":"from","kind":"externalParam"},{"text":": any ","kind":"text"},{"text":"Decoder","kind":"typeIdentifier","preciseIdentifier":"s:s7DecoderP"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11MetaCodable11HelperCoderP5CodedQa","text":"Coded","kind":"typeIdentifier"}],"kind":"symbol","type":"topic"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"type":"topic","title":"Advanced MetaCodable","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","url":"\/tutorials\/usage\/advanced-metacodable","abstract":[],"role":"article"},"User-05.swift":{"fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","fileName":"User.swift","syntax":"swift","identifier":"User-05.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"role":"pseudoSymbol","title":"Create Codable enums with external tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","type":"section"},"Date-02.swift":{"identifier":"Date-02.swift","syntax":"swift","fileName":"Date.swift","fileType":"swift","type":"file","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    let date: Date","    let day: Date","}"],"highlights":[{"line":2},{"line":7}]},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/Coded":{"role":"symbol","title":"Coded","url":"\/documentation\/metacodable\/helpercoder\/coded","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","abstract":[{"type":"text","text":"The actual type of value that is going to be decoded\/encoded."}],"fragments":[{"text":"associatedtype","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Coded"}],"type":"topic","kind":"symbol","required":true},"Date-04.swift":{"fileType":"swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":18}],"content":["import Foundation","import HelperCoders","import MetaCodable","","let dayDateFormatter: DateFormatter = {","    let dateFormatter = DateFormatter()","    dateFormatter","        .setLocalizedDateFormatFromTemplate(\"MMMMd\")","    return dateFormatter","}()","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    @CodedBy(dayDateFormatter)","    let day: Date","}"],"type":"file","fileName":"Date.swift","syntax":"swift","identifier":"Date-04.swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol","title":"Create custom advanced customizations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","type":"section"},"doc://MetaCodable/tutorials/Usage":{"title":"Discover MetaCodable","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"’s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"role":"overview","url":"\/tutorials\/usage","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","kind":"overview","type":"topic"},"Xcode 15 or later":{"type":"xcodeRequirement","title":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","identifier":"Xcode 15 or later"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","type":"section","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Available-Common-Strategies":{"url":"\/tutorials\/metacodable\/commonstrategies#Available-Common-Strategies","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","kind":"section","type":"section","role":"pseudoSymbol","title":"Available Common Strategies","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}]},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through"}],"role":"pseudoSymbol","title":"Create Codable type and customize CodingKey of fields","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","type":"section"},"doc://MetaCodable/documentation/MetaCodable/HelperCoder/encode(_:to:)":{"url":"\/documentation\/metacodable\/helpercoder\/encode(_:to:)","abstract":[{"text":"Encodes given value of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/Coded","isActive":true},{"type":"text","text":" type to the provided "},{"code":"encoder","type":"codeVoice"},{"type":"text","text":"."}],"defaultImplementations":2,"required":true,"role":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/HelperCoder\/encode(_:to:)","title":"encode(_:to:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"encode","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:11MetaCodable11HelperCoderP5CodedQa","kind":"typeIdentifier","text":"Coded"},{"kind":"text","text":", "},{"text":"to","kind":"externalParam"},{"kind":"text","text":": any "},{"text":"Encoder","preciseIdentifier":"s:s7EncoderP","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"}],"kind":"symbol"},"User-02.swift":{"identifier":"User-02.swift","syntax":"swift","fileName":"User.swift","fileType":"swift","type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","}"],"highlights":[{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}]},"Data-04.swift":{"identifier":"Data-04.swift","syntax":"swift","fileName":"Data.swift","fileType":"swift","type":"file","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: [","                .lossy, .default([]),","            ]","        )","    )","    let messages: [Data]","}"],"highlights":[{"line":10},{"line":11},{"line":12}]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"section","type":"section","role":"pseudoSymbol","title":"Create dynamic variation Codable types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","role":"pseudoSymbol","kind":"section","type":"section","title":"Create Codable enums with internal tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"url":"\/tutorials\/usage\/metacodable-essentials","role":"article","kind":"article","type":"topic","title":"MetaCodable essentials","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies":{"url":"\/tutorials\/metacodable\/commonstrategies","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","title":"Using Common Strategies","type":"topic","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"code":"ValueCoder","type":"codeVoice"},{"text":" to all properties automatically.","type":"text"}],"kind":"project","role":"project"},"Date-01.swift":{"identifier":"Date-01.swift","syntax":"swift","fileName":"Date.swift","fileType":"swift","type":"file","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let timestamp: Date","    let date: Date","    let day: Date","}"],"highlights":[]},"Data-01.swift":{"identifier":"Data-01.swift","highlights":[],"type":"file","content":["import Foundation","import MetaCodable","","@Codable","struct Model {","    let messages: [Data]","}"],"fileName":"Data.swift","fileType":"swift","syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"section","type":"section","role":"pseudoSymbol","title":"Decode\/Encode sequence of values","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol","title":"Decode\/Encode date representations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","type":"section"},"User-04.swift":{"fileType":"swift","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"type":"file","fileName":"User.swift","syntax":"swift","identifier":"User-04.swift"},"User-01.swift":{"identifier":"User-01.swift","highlights":[],"type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}"],"fileName":"User.swift","fileType":"swift","syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"section","type":"section","role":"pseudoSymbol","title":"Customize field decoding\/encoding","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"Date-03.swift":{"identifier":"Date-03.swift","syntax":"swift","fileName":"Date.swift","fileType":"swift","type":"file","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(Since1970DateCoder())","    let timestamp: Date","    @CodedBy(ISO8601DateCoder())","    let date: Date","    let day: Date","}"],"highlights":[{"line":9}]},"Data.png":{"type":"image","variants":[{"url":"\/images\/MetaCodable\/Data.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Data~dark.png"}],"identifier":"Data.png","alt":"Base64 data sequence data"},"Data-03.swift":{"identifier":"Data-03.swift","syntax":"swift","fileName":"Data.swift","fileType":"swift","type":"file","content":["import Foundation","import HelperCoders","import MetaCodable","","@Codable","struct Model {","    @CodedBy(","        SequenceCoder(","            elementHelper: Base64Coder(),","            configuration: .lossy","        )","    )","    let messages: [Data]","}"],"highlights":[{"line":9},{"line":10}]},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Applying-Common-Strategies":{"url":"\/tutorials\/metacodable\/commonstrategies#Applying-Common-Strategies","role":"pseudoSymbol","kind":"section","type":"section","title":"Applying Common Strategies","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies"},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"url":"\/tutorials\/metacodable\/essential","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","title":"Use with general-purpose Swift types","type":"topic","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"project","role":"project"},"User-03.swift":{"identifier":"User-03.swift","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24}],"type":"file","content":["import MetaCodable","","@Codable","struct User {","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileName":"User.swift","fileType":"swift","syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"url":"\/tutorials\/metacodable\/dynamic","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","title":"Represent dynamic data variations with protocol","type":"topic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"project","role":"project"},"User.png":{"type":"image","variants":[{"url":"\/images\/MetaCodable\/User.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/User~dark.png","traits":["1x","dark"]}],"identifier":"User.png","alt":"User data with different key in decoding and encoding"},"User-06.swift":{"identifier":"User-06.swift","highlights":[{"line":11}],"type":"file","content":["import MetaCodable","","@Codable","struct User {","    @CodedBy(","        TwoKeyCoder<String>(","            decodingKey: \"email\",","            encodingKey: \"emailAddress\"","        )","    )","    @CodedAt","    let email: String","}","","struct TwoKeyCoder<Coded>: HelperCoder","where Coded: Codable {","    let decodingKey: String","    let encodingKey: String","","    func decode(from decoder: Decoder) throws -> Coded {","        let container = try decoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: decodingKey)","        return try container.decode(Coded.self, forKey: key)","    }","","    func encode(_ value: Coded, to encoder: Encoder) throws {","        var container = encoder.container(keyedBy: CodingKeys.self)","        let key = CodingKeys(stringValue: encodingKey)","        try container.encode(value, forKey: key)","    }","","    struct CodingKeys: CodingKey {","        let stringValue: String","        var intValue: Int? { nil }","","        init(stringValue: String) {","            self.stringValue = stringValue","        }","","        init?(intValue: Int) {","            return nil","        }","    }","}"],"fileName":"User.swift","fileType":"swift","syntax":"swift"},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"title":"Add common decoding\/encoding customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"project","url":"\/tutorials\/metacodable\/helper","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","estimatedTime":"20min","kind":"project","type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Check-Your-Understanding":{"type":"link","title":"Check Your Understanding","url":"\/tutorials\/metacodable\/commonstrategies#Check-Your-Understanding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}]},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"title":"CodedAt(_:)","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"title":"Represent variations in data","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"role":"project","url":"\/tutorials\/metacodable\/enum","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","estimatedTime":"10min","kind":"project","type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","role":"pseudoSymbol","title":"Decode\/Encode basic value types without type check","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"Product.png":{"type":"image","variants":[{"url":"\/images\/MetaCodable\/Product.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Product~dark.png"}],"identifier":"Product.png","alt":"List of products with inconsistent property types"},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"title":"CodedBy(_:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodedBy","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"text":" ","type":"text"},{"type":"text","text":"encoded by the provided "},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"Product-01.swift":{"fileType":"swift","highlights":[],"content":["import HelperCoders","import MetaCodable","","@Codable","struct Product {","    @CodedBy(ValueCoder<Int>())","    let sku: Int","    @CodedBy(ValueCoder<Bool>())","    let inStock: Bool","    @CodedBy(ValueCoder<String>())","    let name: String","    @CodedBy(ValueCoder<Double>())","    let price: Double","}"],"type":"file","fileName":"Product.swift","syntax":"swift","identifier":"Product-01.swift"}}}