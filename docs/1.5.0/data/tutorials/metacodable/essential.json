{"kind":"project","hierarchy":{"modules":[{"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials","projects":[{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"task"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","kind":"task"},{"kind":"assessment","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding"}]},{"sections":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","kind":"task"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag"}],"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum"}]},{"projects":[{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","kind":"task"},{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","kind":"task"}]},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","sections":[{"kind":"task","reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types"},{"reference":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","kind":"task"}]}],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable"}],"paths":[["doc:\/\/MetaCodable\/tutorials\/Usage","doc:\/\/MetaCodable\/tutorials\/Usage\/$volume","doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"]],"reference":"doc:\/\/MetaCodable\/tutorials\/Usage"},"sections":[{"chapter":"MetaCodable essentials","content":[{"inlineContent":[{"text":"This tutorial guides you through","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"creating equivalent types for decoding\/encoding."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"customizing fieldâ€™s ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"fallback field value when decoding fails","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"ignoring fields from decoding\/encoding.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"share common data across ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types."}],"type":"paragraph"}]}],"type":"unorderedList"}],"xcodeRequirement":"Xcode 15 or later","title":"Use with general-purpose Swift types","kind":"hero","estimatedTimeInMinutes":10},{"kind":"tasks","tasks":[{"stepsSection":[{"media":"Post-01.png","content":[{"inlineContent":[{"type":"text","text":"Analyze fields and their data types from data."}],"type":"paragraph"}],"runtimePreview":null,"type":"step","code":null,"caption":[]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create equivalent ","type":"text"},{"type":"codeVoice","code":"struct"},{"text":"\/","type":"text"},{"code":"class","type":"codeVoice"},{"type":"text","text":" with field name same as in data and type equivalent to encoded data type."}]}],"caption":[],"media":null,"code":"Post-01.swift","type":"step","runtimePreview":"Post-01.png"},{"media":null,"runtimePreview":"Post-01.png","caption":[],"code":"Post-02.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Attach "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)"},{"type":"text","text":" macro to type definition."}]}]},{"content":[{"inlineContent":[{"text":"Provide custom ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" value to use to "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"type":"text","text":" macro attached to said field."}],"type":"paragraph"}],"media":null,"code":"Post-03.swift","runtimePreview":"Post-01.png","caption":[],"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Provide each "},{"code":"CodingKey","type":"codeVoice"},{"text":" path components in order, to ","type":"text"},{"isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","type":"reference"},{"text":" macro for decoding nested field at path.","type":"text"}],"type":"paragraph"}],"media":null,"caption":[],"type":"step","code":"Post-04.swift","runtimePreview":"Post-04.png"},{"content":[{"inlineContent":[{"text":"Last ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"type":"text","text":" path component can be omitted if it is same as field name by using "},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)"},{"type":"text","text":" macro."}],"type":"paragraph"}],"caption":[],"media":null,"type":"step","runtimePreview":"Post-04.png","code":"Post-05.swift"},{"runtimePreview":"Post-06.png","content":[{"inlineContent":[{"type":"text","text":"Use "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","isActive":true,"type":"reference"},{"text":" macro to specify multiple possible ","type":"text"},{"type":"codeVoice","code":"CodingKey"},{"text":"s for a single field.","type":"text"}],"type":"paragraph"}],"type":"step","code":"Post-06.swift","caption":[],"media":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true},{"type":"text","text":" macro to specify "},{"type":"codeVoice","code":"CodingKey"},{"text":" case style while using different case style for field name.","type":"text"}]}],"runtimePreview":"Post-07.png","media":null,"type":"step","code":"Post-07.swift","caption":[]}],"title":"Create Codable type and customize CodingKey of fields","contentSection":[{"kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"The simplest way to generate ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":" implementation is to attach ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)"},{"text":" macro to type definition, provided all its properties using types that are already ","type":"text"},{"code":"Codable","type":"codeVoice"},{"text":".","type":"text"}]},{"inlineContent":[{"text":"These types include standard library types like ","type":"text"},{"code":"String","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Foundation"},{"type":"text","text":" types like "},{"code":"Date","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"Data"},{"type":"text","text":", and "},{"code":"URL","type":"codeVoice"},{"type":"text","text":". Any type whose properties are "},{"code":"Codable","type":"codeVoice"},{"text":" automatically conforms to ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" just by attaching this macro.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"CodingKey"},{"text":" of each field can be customized individually using ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true,"type":"reference"},{"type":"text","text":" macros. Optionally, global field case style can be declared using "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","isActive":true},{"type":"text","text":" macro."}]}],"mediaPosition":"trailing"}],"anchor":"Create-Codable-type-and-customize-CodingKey-of-fields"},{"contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"text":"Following level of customizations are possible:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Provide default value for fields to be used when decoding fails with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","isActive":true,"type":"reference"},{"text":" macro.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore both decoding and encoding with ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","type":"reference","isActive":true},{"type":"text","text":" macro per fields and ignore only decoding or encoding with "},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","isActive":true},{"text":" or ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","isActive":true,"type":"reference"},{"text":" macros per fields respectively.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore all initialized fields for a type from decoding\/encoding with "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true,"type":"reference"},{"type":"text","text":" macro."}]}]}]}],"mediaPosition":"trailing"}],"anchor":"Customize-field-decodingencoding","stepsSection":[{"media":null,"caption":[],"code":"Post-08.swift","runtimePreview":"Post-06.png","content":[{"type":"paragraph","inlineContent":[{"text":"Provide default value per field if decoding fails due to missing or invalid data.","type":"text"}]}],"type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Ignore fields from decoding or encoding or both with ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"text":" or ","type":"text"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","isActive":true},{"type":"text","text":" respectively."}]}],"caption":[],"code":"Post-09.swift","type":"step","runtimePreview":"Post-06.png"},{"caption":[],"code":"Post-10.swift","media":null,"type":"step","runtimePreview":"Post-06.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Ignore all initialized fields from decoding and encoding by attaching "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","isActive":true,"type":"reference"},{"type":"text","text":" macro to type definition."}]}]},{"media":null,"caption":[],"runtimePreview":"Post-11.png","type":"step","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Allow specific initialized field decoding and encoding by attaching any of "},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"type":"text","text":"\/"},{"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","isActive":true},{"type":"text","text":"\/"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)"},{"type":"text","text":"\/"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)"},{"type":"text","text":" macros."}]}],"code":"Post-11.swift"},{"caption":[],"media":null,"code":"Post-12.swift","runtimePreview":"Post-11.png","content":[{"type":"paragraph","inlineContent":[{"text":"Attach ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()"},{"type":"text","text":" or "},{"isActive":true,"type":"reference","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()"},{"text":" macro to initialized field for only suppressing decoding or encoding respectively.","type":"text"}]}],"type":"step"}],"title":"Customize field decoding\/encoding"},{"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Common ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" fields can be extracted to a separate type to be shared across other "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" types."}]}]}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Identify fields that are common across multiple data."}]}],"type":"step","media":"Post-13.png","runtimePreview":null,"caption":[],"code":null},{"runtimePreview":"Post-13.png","media":null,"type":"step","content":[{"inlineContent":[{"text":"Create equivalent ","type":"text"},{"type":"codeVoice","code":"Codable"},{"text":" type with fields representing common data.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"Post-13.swift"},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Create equivalent "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" type for each specific post category only with fields representing category specific data."}],"type":"paragraph"}],"code":"Post-14.swift","caption":[],"runtimePreview":"Post-13.png","type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Add common post data field to each specific post category, field name doesnâ€™t matter here."}],"type":"paragraph"}],"type":"step","code":"Post-15.swift","runtimePreview":"Post-13.png","media":null,"caption":[]},{"media":null,"type":"step","content":[{"inlineContent":[{"text":"Attach ","type":"text"},{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","isActive":true,"type":"reference"},{"type":"text","text":" without any arguments to common post data field to directly decode common post fields data ignoring the key for each category."}],"type":"paragraph"}],"runtimePreview":"Post-13.png","caption":[],"code":"Post-16.swift"}],"title":"Share common Codable fields","anchor":"Share-common-Codable-fields"}]},{"abstract":[{"text":"Learn how to apply strategies like ","type":"text"},{"code":"ValueCoder","type":"codeVoice"},{"type":"text","text":" to all properties automatically."}],"title":"Using Common Strategies","action":{"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","type":"reference","isActive":true,"overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}]},"featuredEyebrow":"Tutorial","kind":"callToAction"}],"identifier":{"url":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","interfaceLanguage":"swift"},"metadata":{"category":"Discover MetaCodable","categoryPathComponent":"Usage","role":"project","title":"Use with general-purpose Swift types"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/metacodable\/essential"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://MetaCodable/documentation/MetaCodable/IgnoreCodingInitialized()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCodingInitialized()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IgnoreCodingInitialized"},{"text":"()","kind":"text"}],"kind":"symbol","title":"IgnoreCodingInitialized()","url":"\/documentation\/metacodable\/ignorecodinginitialized()","type":"topic","abstract":[{"text":"Indicates by default initialized properties\/associated values for","type":"text"},{"type":"text","text":" "},{"text":"the attached type\/enum-case will be ignored for decoding\/encoding.","type":"text"}]},"doc://MetaCodable/documentation/MetaCodable/CodedBy(_:)":{"title":"CodedBy(_:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"CodedBy","kind":"identifier"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"type":"text","text":"Indicates the field or enum\/protocol identifier needs to be decoded and"},{"text":" ","type":"text"},{"type":"text","text":"encoded by the provided "},{"code":"helper","type":"codeVoice"},{"text":" instance.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedBy(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedby(_:)"},"doc://MetaCodable/documentation/MetaCodable/Default(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Default(_:)","url":"\/documentation\/metacodable\/default(_:)","title":"Default(_:)","role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"Default","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"T"},{"text":")","kind":"text"}],"abstract":[{"text":"Provides a ","type":"text"},{"code":"default","type":"codeVoice"},{"type":"text","text":" value to be used when decoding fails and"},{"text":" ","type":"text"},{"text":"when not initialized explicitly in memberwise initializer(s).","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/Enum":{"title":"Represent variations in data","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"role":"project","url":"\/tutorials\/metacodable\/enum","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum","estimatedTime":"10min","kind":"project","type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-external-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-external-tag","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"role":"pseudoSymbol","title":"Create Codable enums with external tag","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-external-tag","type":"section"},"Post-11.png":{"type":"image","alt":"Basic post JSON representation with author and creation time with delivered time only when encoded","identifier":"Post-11.png","variants":[{"url":"\/images\/MetaCodable\/Post-11.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Post-11~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-basic-value-types-without-type-check":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-basic-value-types-without-type-check","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-basic-value-types-without-type-check","kind":"section","type":"section","role":"pseudoSymbol","title":"Decode\/Encode basic value types without type check","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"Xcode 15 or later":{"type":"xcodeRequirement","title":"Xcode 15 or later","url":"https:\/\/itunes.apple.com\/us\/app\/xcode\/id497799835?mt=12","identifier":"Xcode 15 or later"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-date-representations":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-date-representations","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol","title":"Decode\/Encode date representations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-date-representations","type":"section"},"doc://MetaCodable/documentation/MetaCodable/CodedAt(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAt(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codedat(_:)","abstract":[{"text":"Indicates the field needs to be decoded from and encoded to the","type":"text"},{"type":"text","text":" "},{"code":"CodingKey","type":"codeVoice"},{"type":"text","text":" path provided."}],"title":"CodedAt(_:)","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAt"},{"kind":"text","text":"("},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":"...)","kind":"text"}]},"doc://MetaCodable/documentation/MetaCodable/IgnoreEncoding()":{"type":"topic","kind":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreEncoding()","url":"\/documentation\/metacodable\/ignoreencoding()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreEncoding","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"text":"Indicates the field\/case\/type needs to ignored from encoding.","type":"text"}],"title":"IgnoreEncoding()"},"Post-08.swift":{"syntax":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"identifier":"Post-08.swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[]},"doc://MetaCodable/tutorials/MetaCodable/Helper":{"title":"Add common decoding\/encoding customizations","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"text":" module.","type":"text"}],"role":"project","url":"\/tutorials\/metacodable\/helper","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper","estimatedTime":"20min","kind":"project","type":"topic"},"Post-01.swift":{"type":"file","highlights":[],"content":["struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"fileType":"swift","identifier":"Post-01.swift","syntax":"swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/Usage/MetaCodable-essentials":{"url":"\/tutorials\/usage\/metacodable-essentials","role":"article","kind":"article","type":"topic","title":"MetaCodable essentials","abstract":[],"identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/MetaCodable-essentials"},"Post-15.swift":{"syntax":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let base: Post","    let url: String","    let duration: Float","}"],"identifier":"Post-15.swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":15},{"line":21},{"line":28}]},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Check-Your-Understanding":{"type":"link","title":"Check Your Understanding","url":"\/tutorials\/metacodable\/commonstrategies#Check-Your-Understanding","titleInlineContent":[{"type":"text","text":"Check Your Understanding"}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Check-Your-Understanding"},"Post-06.png":{"type":"image","alt":"Basic post JSON representation with author and creation time","identifier":"Post-06.png","variants":[{"url":"\/images\/MetaCodable\/Post-06.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-06~dark.png"}]},"Post-01.png":{"type":"image","alt":"Basic post JSON representation","identifier":"Post-01.png","variants":[{"url":"\/images\/MetaCodable\/Post-01.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Post-01~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Applying-Common-Strategies":{"url":"\/tutorials\/metacodable\/commonstrategies#Applying-Common-Strategies","role":"pseudoSymbol","kind":"section","type":"section","title":"Applying Common Strategies","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Applying-Common-Strategies"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Create-Codable-type-and-customize-CodingKey-of-fields":{"url":"\/tutorials\/metacodable\/essential#Create-Codable-type-and-customize-CodingKey-of-fields","kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through"}],"role":"pseudoSymbol","title":"Create Codable type and customize CodingKey of fields","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Create-Codable-type-and-customize-CodingKey-of-fields","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Customize-dynamic-data-variations-detection":{"kind":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Customize-dynamic-data-variations-detection","title":"Customize dynamic data variations detection","type":"section","url":"\/tutorials\/metacodable\/dynamic#Customize-dynamic-data-variations-detection","role":"pseudoSymbol"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Customize-field-decodingencoding":{"url":"\/tutorials\/metacodable\/essential#Customize-field-decodingencoding","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Customize-field-decodingencoding","kind":"section","type":"section","role":"pseudoSymbol","title":"Customize field decoding\/encoding","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"Post-16.swift":{"syntax":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    @CodedAt","    let base: Post","    let text: String","}","","@Codable","struct PicturePost {","    @CodedAt","    let base: Post","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    @CodedAt","    let base: Post","    let url: String","    let duration: Float","}"],"identifier":"Post-16.swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":15},{"line":22},{"line":30}]},"Post-13.png":{"type":"image","alt":"Multi-category post JSON representation","identifier":"Post-13.png","variants":[{"url":"\/images\/MetaCodable\/Post-13.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-13~dark.png"}]},"doc://MetaCodable/tutorials/MetaCodable/Dynamic#Create-dynamic-variation-Codable-types":{"url":"\/tutorials\/metacodable\/dynamic#Create-dynamic-variation-Codable-types","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic#Create-dynamic-variation-Codable-types","kind":"section","type":"section","role":"pseudoSymbol","title":"Create dynamic variation Codable types","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}]},"Post-11.swift":{"syntax":"swift","identifier":"Post-11.swift","fileType":"swift","fileName":"Post.swift","highlights":[{"line":16},{"line":17}],"type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    var deliveredTime: Double = Date().timeIntervalSince1970","}"]},"doc://MetaCodable/documentation/MetaCodable/CodedIn(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedIn(_:)","type":"topic","abstract":[{"type":"text","text":"Indicates the field needs to be decoded from and encoded in the"},{"type":"text","text":" "},{"type":"text","text":"container "},{"type":"codeVoice","code":"CodingKey"},{"text":" path provided with field name as final","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"CodingKey"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"CodedIn","kind":"identifier"},{"text":"(","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"title":"CodedIn(_:)","role":"symbol","url":"\/documentation\/metacodable\/codedin(_:)","kind":"symbol"},"doc://MetaCodable/documentation/MetaCodable/Codable(commonStrategies:)":{"title":"Codable(commonStrategies:)","fragments":[{"text":"macro","kind":"keyword"},{"kind":"text","text":" "},{"text":"Codable","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"commonStrategies"},{"text":": [","kind":"text"},{"kind":"typeIdentifier","text":"CodableCommonStrategy","preciseIdentifier":"s:11MetaCodable0B14CommonStrategyV"},{"text":"])","kind":"text"}],"abstract":[{"type":"text","text":"Generate "},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" implementation of "},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"class"},{"type":"text","text":", "},{"code":"enum","type":"codeVoice"},{"type":"text","text":", "},{"code":"actor","type":"codeVoice"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":" types by leveraging custom attributes provided on variable","type":"text"},{"type":"text","text":" "},{"text":"declarations.","type":"text"}],"kind":"symbol","type":"topic","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/Codable(commonStrategies:)","role":"symbol","url":"\/documentation\/metacodable\/codable(commonstrategies:)"},"Post-04.png":{"type":"image","alt":"Basic post JSON representation with author","identifier":"Post-04.png","variants":[{"url":"\/images\/MetaCodable\/Post-04.png","traits":["1x","light"]},{"url":"\/images\/MetaCodable\/Post-04~dark.png","traits":["1x","dark"]}]},"doc://MetaCodable/documentation/MetaCodable/CodingKeys(_:)":{"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodingKeys(_:)","kind":"symbol","role":"symbol","url":"\/documentation\/metacodable\/codingkeys(_:)","abstract":[{"text":"Indicates ","type":"text"},{"code":"CodingKey","type":"codeVoice"},{"text":" for the field names\/associated value label will be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of the provided case format."}],"title":"CodingKeys(_:)","type":"topic","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"text":"CodingKeys","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:11MetaCodable21CodingKeyNameStrategyO","kind":"typeIdentifier","text":"CodingKeyNameStrategy"},{"kind":"text","text":")"}]},"Post-04.swift":{"syntax":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedAt(\"created_by\", \"author\")","    let author: String","}"],"identifier":"Post-04.swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":9},{"line":10}]},"Post-05.swift":{"type":"file","highlights":[{"line":9}],"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"fileType":"swift","identifier":"Post-05.swift","syntax":"swift","fileName":"Post.swift"},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-adjacent-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-adjacent-tag","role":"pseudoSymbol","kind":"section","type":"section","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":" using "},{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-adjacent-tag","title":"Create Codable enums with adjacent tag"},"doc://MetaCodable/documentation/MetaCodable/IgnoreCoding()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreCoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreCoding","kind":"identifier"},{"text":"()","kind":"text"}],"kind":"symbol","title":"IgnoreCoding()","url":"\/documentation\/metacodable\/ignorecoding()","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding and encoding.","type":"text"}]},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies#Available-Common-Strategies":{"url":"\/tutorials\/metacodable\/commonstrategies#Available-Common-Strategies","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies#Available-Common-Strategies","kind":"section","type":"section","role":"pseudoSymbol","title":"Available Common Strategies","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"type":"codeVoice","code":"ValueCoder"},{"type":"text","text":" to all properties automatically."}]},"doc://MetaCodable/tutorials/MetaCodable/CommonStrategies":{"url":"\/tutorials\/metacodable\/commonstrategies","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/CommonStrategies","title":"Using Common Strategies","type":"topic","abstract":[{"type":"text","text":"Learn how to apply strategies like "},{"code":"ValueCoder","type":"codeVoice"},{"text":" to all properties automatically.","type":"text"}],"kind":"project","role":"project"},"Post-14.swift":{"syntax":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}","","@Codable","struct TextPost {","    let text: String","}","","@Codable","struct PicturePost {","    let url: String","    let caption: String","}","","@Codable","struct AudioPost {","    let url: String","    let duration: Float","}"],"identifier":"Post-14.swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":12},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19},{"line":20},{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}]},"doc://MetaCodable/tutorials/MetaCodable/Essential":{"url":"\/tutorials\/metacodable\/essential","estimatedTime":"10min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential","title":"Use with general-purpose Swift types","type":"topic","abstract":[{"text":"This tutorial guides you through","type":"text"}],"kind":"project","role":"project"},"doc://MetaCodable/tutorials/Usage":{"title":"Discover MetaCodable","abstract":[{"code":"MetaCodable","type":"codeVoice"},{"type":"text","text":" supercharges "},{"type":"codeVoice","code":"Swift"},{"type":"text","text":"â€™s "},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" implementations with macros. Remove previous boiler-plate for "},{"code":"Codable","type":"codeVoice"},{"text":" implementations and create ","type":"text"},{"type":"codeVoice","code":"Codable"},{"type":"text","text":" conformances faster than ever before."}],"role":"overview","url":"\/tutorials\/usage","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage","kind":"overview","type":"topic"},"doc://MetaCodable/tutorials/MetaCodable/Dynamic":{"url":"\/tutorials\/metacodable\/dynamic","estimatedTime":"20min","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Dynamic","title":"Represent dynamic data variations with protocol","type":"topic","abstract":[{"type":"text","text":"This tutorial guides you through handling dynamic variation in data and how to represent different kinds of variations as separate types, tied to a single protocol."}],"kind":"project","role":"project"},"doc://MetaCodable/tutorials/Usage/Advanced-MetaCodable":{"type":"topic","title":"Advanced MetaCodable","kind":"article","identifier":"doc:\/\/MetaCodable\/tutorials\/Usage\/Advanced-MetaCodable","url":"\/tutorials\/usage\/advanced-metacodable","abstract":[],"role":"article"},"doc://MetaCodable/documentation/MetaCodable/CodedAs(_:_:)":{"kind":"symbol","type":"topic","url":"\/documentation\/metacodable\/codedas(_:_:)","abstract":[{"type":"text","text":"Provides values to be used for an enum-case instead of using case name or"},{"type":"text","text":" "},{"type":"text","text":"additional variable "},{"type":"codeVoice","code":"CodingKey"},{"text":"s.","type":"text"}],"title":"CodedAs(_:_:)","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodedAs"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":"...)","kind":"text"}],"identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/CodedAs(_:_:)","role":"symbol"},"Post-07.swift":{"type":"file","highlights":[{"line":4},{"line":11}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","}"],"fileType":"swift","identifier":"Post-07.swift","syntax":"swift","fileName":"Post.swift"},"Post-06.swift":{"syntax":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    @CodedAs(\"title_name\")","    let title: String","    let likes: Int","    @CodedIn(\"created_by\")","    let author: String","}"],"identifier":"Post-06.swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":7}]},"Post-07.png":{"type":"image","variants":[{"url":"\/images\/MetaCodable\/Post-07.png","traits":["1x","light"]},{"traits":["1x","dark"],"url":"\/images\/MetaCodable\/Post-07~dark.png"}],"identifier":"Post-07.png","alt":"Basic post JSON representation with author and creation time"},"doc://MetaCodable/documentation/MetaCodable/IgnoreDecoding()":{"role":"symbol","identifier":"doc:\/\/MetaCodable\/documentation\/MetaCodable\/IgnoreDecoding()","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IgnoreDecoding","kind":"identifier"},{"kind":"text","text":"()"}],"kind":"symbol","title":"IgnoreDecoding()","url":"\/documentation\/metacodable\/ignoredecoding()","type":"topic","abstract":[{"text":"Indicates the field\/case\/type needs to ignored from decoding.","type":"text"}]},"Post-13.swift":{"syntax":"swift","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","    let createdAt: String","}"],"identifier":"Post-13.swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[]},"Post-12.swift":{"type":"file","highlights":[{"line":17}],"content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","    @CodedIn","    @IgnoreDecoding","    var deliveredTime: Double = Date().timeIntervalSince1970","}"],"fileType":"swift","identifier":"Post-12.swift","syntax":"swift","fileName":"Post.swift"},"Post-02.swift":{"syntax":"swift","content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    let header: String","    let likes: Int","}"],"identifier":"Post-02.swift","fileName":"Post.swift","fileType":"swift","type":"file","highlights":[{"line":1},{"line":2},{"line":3}]},"doc://MetaCodable/tutorials/MetaCodable/Enum#Create-Codable-enums-with-internal-tag":{"url":"\/tutorials\/metacodable\/enum#Create-Codable-enums-with-internal-tag","role":"pseudoSymbol","kind":"section","type":"section","title":"Create Codable enums with internal tag","abstract":[{"type":"text","text":"This tutorial guides you through handling variation in data and how to represent different kinds of variations in "},{"code":"Swift","type":"codeVoice"},{"type":"text","text":" using "},{"type":"codeVoice","code":"MetaCodable"},{"type":"text","text":"."}],"identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Enum#Create-Codable-enums-with-internal-tag"},"doc://MetaCodable/tutorials/MetaCodable/Essential#Share-common-Codable-fields":{"url":"\/tutorials\/metacodable\/essential#Share-common-Codable-fields","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Essential#Share-common-Codable-fields","kind":"section","type":"section","role":"pseudoSymbol","title":"Share common Codable fields","abstract":[{"type":"text","text":"This tutorial guides you through"}]},"Post-10.swift":{"syntax":"swift","identifier":"Post-10.swift","fileType":"swift","fileName":"Post.swift","highlights":[{"line":5}],"type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","@IgnoreCodingInitialized","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    var interacted: Bool = false","}"]},"Post-09.swift":{"syntax":"swift","identifier":"Post-09.swift","fileType":"swift","fileName":"Post.swift","highlights":[{"line":14},{"line":15}],"type":"file","content":["import MetaCodable","","@Codable","@CodingKeys(.snake_case)","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    @Default(0)","    let likes: Int","    let createdAt: String","    @CodedIn(\"created_by\")","    let author: String","    @IgnoreCoding","    var interacted: Bool = false","}"]},"doc://MetaCodable/tutorials/MetaCodable/Helper#Create-custom-advanced-customizations":{"url":"\/tutorials\/metacodable\/helper#Create-custom-advanced-customizations","kind":"section","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}],"role":"pseudoSymbol","title":"Create custom advanced customizations","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#Create-custom-advanced-customizations","type":"section"},"doc://MetaCodable/tutorials/MetaCodable/Helper#DecodeEncode-sequence-of-values":{"url":"\/tutorials\/metacodable\/helper#DecodeEncode-sequence-of-values","identifier":"doc:\/\/MetaCodable\/tutorials\/MetaCodable\/Helper#DecodeEncode-sequence-of-values","kind":"section","type":"section","role":"pseudoSymbol","title":"Decode\/Encode sequence of values","abstract":[{"type":"text","text":"This tutorial shows how common customizations to decoding\/encoding properties can be made with the help of "},{"type":"codeVoice","code":"HelperCoders"},{"type":"text","text":" module."}]},"Post-03.swift":{"type":"file","highlights":[{"line":6},{"line":7}],"content":["import MetaCodable","","@Codable","struct Post {","    let id: String","    @CodedAt(\"header\")","    let title: String","    let likes: Int","}"],"fileType":"swift","identifier":"Post-03.swift","syntax":"swift","fileName":"Post.swift"}}}